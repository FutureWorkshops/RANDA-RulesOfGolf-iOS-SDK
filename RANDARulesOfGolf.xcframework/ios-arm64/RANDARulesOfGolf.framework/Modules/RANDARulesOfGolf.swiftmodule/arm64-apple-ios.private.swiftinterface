// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RANDARulesOfGolf
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Combine
import CoreData
import DTCoreText
import Firebase
import Foundation
import KalturaPlayerSDKStreamamg
import MediaPlayer
import NotificationBannerSwift
import PDFKit
@_exported import RANDARulesOfGolf
import Reachability
import SafariServices
import Swift
import SwiftSoup
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc(DiagramsCarousel) public class DiagramsCarousel : RANDARulesOfGolf.BaseRandaEntity {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol DataConfigurable {
  associatedtype ViewModel
  func configure(viewModel: Self.ViewModel?)
}
public protocol StyleConfigurable {
  associatedtype Style
  func configure(style: Self.Style)
}
public protocol TableViewModel {
  var numberOfSections: Swift.Int { get }
  func numberOfCells(section: Swift.Int) -> Swift.Int
  func header(section: Swift.Int) -> RANDARulesOfGolf.CellData?
  func footer(section: Swift.Int) -> RANDARulesOfGolf.CellData?
  func cellData(indexPath: Foundation.IndexPath) -> RANDARulesOfGolf.CellData
  func registerCells(tableView: UIKit.UITableView)
}
extension Swift.Collection {
  public subscript(safe index: Self.Index) -> Self.Element? {
    get
  }
}
public protocol DecodableInstantiable {
  static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  mutating func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
}
extension RANDARulesOfGolf.DecodableInstantiable where Self : CoreData.NSManagedObject {
  @discardableResult
  public static func findOrCreate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws -> Self
  public init(with dto: Any?, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ErrorViewController : RANDARulesOfGolf.ROGViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
public enum SettingsEvent : RANDARulesOfGolf.AnalyticsEvent {
  case tab
  case acceptedNotifications
  case deniedNotifications
  case enabledAdvancedMode
  case disabledAdvancedMode
  case goToPhoneSettingsNotifications
  case goToPhoneSettingsLanguage
  case aboutRules
  case termsOfUse
  case privacyPolicy
  case emailUs
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
  public static func == (a: RANDARulesOfGolf.SettingsEvent, b: RANDARulesOfGolf.SettingsEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CommonSituation) public class CommonSituation : RANDARulesOfGolf.BaseRandaEntity {
  override public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.VideoFeed {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.VideoFeed>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sections: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.VideoFeed {
  @objc(insertObject:inSectionsAtIndex:) @NSManaged dynamic public func insertIntoSections(_ value: RANDARulesOfGolf.VideoSection, at idx: Swift.Int)
  @objc(removeObjectFromSectionsAtIndex:) @NSManaged dynamic public func removeFromSections(at idx: Swift.Int)
  @objc(insertSections:atIndexes:) @NSManaged dynamic public func insertIntoSections(_ values: [RANDARulesOfGolf.VideoSection], at indexes: Foundation.NSIndexSet)
  @objc(removeSectionsAtIndexes:) @NSManaged dynamic public func removeFromSections(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInSectionsAtIndex:withObject:) @NSManaged dynamic public func replaceSections(at idx: Swift.Int, with value: RANDARulesOfGolf.VideoSection)
  @objc(replaceSectionsAtIndexes:withSections:) @NSManaged dynamic public func replaceSections(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.VideoSection])
  @objc(addSectionsObject:) @NSManaged dynamic public func addToSections(_ value: RANDARulesOfGolf.VideoSection)
  @objc(removeSectionsObject:) @NSManaged dynamic public func removeFromSections(_ value: RANDARulesOfGolf.VideoSection)
  @objc(addSections:) @NSManaged dynamic public func addToSections(_ values: Foundation.NSOrderedSet)
  @objc(removeSections:) @NSManaged dynamic public func removeFromSections(_ values: Foundation.NSOrderedSet)
}
extension RANDARulesOfGolf.VideoFeed : Swift.Identifiable {
  public typealias ID = Swift.String?
}
public struct LabelRepository {
}
public protocol LocalizableString {
  var rawValue: Swift.String { get }
}
public protocol FormattedLocalizableString : RANDARulesOfGolf.LocalizableString {
  var arguments: [Swift.CVarArg] { get }
}
extension RANDARulesOfGolf.LocalizableString {
  public var localized: Swift.String {
    get
  }
  public func localizedString(arguments: [Swift.CVarArg]) -> Swift.String
}
extension RANDARulesOfGolf.DiagramsCarousel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.DiagramsCarousel>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var diagrams: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.DiagramsCarousel {
  @objc(insertObject:inDiagramsAtIndex:) @NSManaged dynamic public func insertIntoDiagrams(_ value: RANDARulesOfGolf.Diagram, at idx: Swift.Int)
  @objc(removeObjectFromDiagramsAtIndex:) @NSManaged dynamic public func removeFromDiagrams(at idx: Swift.Int)
  @objc(insertDiagrams:atIndexes:) @NSManaged dynamic public func insertIntoDiagrams(_ values: [RANDARulesOfGolf.Diagram], at indexes: Foundation.NSIndexSet)
  @objc(removeDiagramsAtIndexes:) @NSManaged dynamic public func removeFromDiagrams(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInDiagramsAtIndex:withObject:) @NSManaged dynamic public func replaceDiagrams(at idx: Swift.Int, with value: RANDARulesOfGolf.Diagram)
  @objc(replaceDiagramsAtIndexes:withDiagrams:) @NSManaged dynamic public func replaceDiagrams(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.Diagram])
  @objc(addDiagramsObject:) @NSManaged dynamic public func addToDiagrams(_ value: RANDARulesOfGolf.Diagram)
  @objc(removeDiagramsObject:) @NSManaged dynamic public func removeFromDiagrams(_ value: RANDARulesOfGolf.Diagram)
  @objc(addDiagrams:) @NSManaged dynamic public func addToDiagrams(_ values: Foundation.NSOrderedSet)
  @objc(removeDiagrams:) @NSManaged dynamic public func removeFromDiagrams(_ values: Foundation.NSOrderedSet)
}
@_inheritsConvenienceInitializers @objc(VisualSearchItem) public class VisualSearchItem : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum RulesEvent : RANDARulesOfGolf.AnalyticsEvent {
  case tab
  case golfList
  case golf(ruleNumber: Swift.String, codename: Swift.String)
  case golfSection(ruleNumber: Swift.String, codename: Swift.String)
  case definitionList
  case definition(ruleNumber: Swift.String, codename: Swift.String)
  case definitionClarificationsList
  case definitionClarification(ruleNumber: Swift.String, codename: Swift.String)
  case clarificationsList
  case clarification(ruleNumber: Swift.String, codename: Swift.String)
  case clarificationViewRuleButton(ruleNumber: Swift.String, codename: Swift.String)
  case committeeProceduresList
  case committeeProceduresSublist
  case committeeProceduresSection(ruleNumber: Swift.String, codename: Swift.String)
  case committeeProcedure(ruleNumber: Swift.String, codename: Swift.String)
  case amateurList
  case amateur(ruleNumber: Swift.String, codename: Swift.String)
  case viewRule(ruleNumber: Swift.String, codename: Swift.String)
  case viewClarificationButton(ruleNumber: Swift.String, codename: Swift.String)
  case viewDefinition(ruleNumber: Swift.String, codename: Swift.String)
  case watchVideo(streamId: Swift.String)
  case viewDiagram
  case visualSearchAreas
  case visualSearchSection(codename: Swift.String)
  case visualSearchDetail(codename: Swift.String)
  case visualSearchRelatedRule(ruleNumber: Swift.String, codename: Swift.String)
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class ROGNetworkManager : RANDARulesOfGolf.NetworkManager {
  @objc deinit
}
public enum LoadingMode {
  case network
  case storage
  case storageElseNetwork
  public static func == (a: RANDARulesOfGolf.LoadingMode, b: RANDARulesOfGolf.LoadingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class StatefulLoader<T> {
  public var receiveOn: Dispatch.DispatchQueue
  public init()
  public enum State {
    case unloaded
    case loading
    case loaded(result: RANDARulesOfGolf.Result<T>)
  }
  public var isLoading: Swift.Bool {
    get
  }
  public var hasLoaded: Swift.Bool {
    get
  }
  public var loadError: Swift.Error? {
    get
  }
  public var state: RANDARulesOfGolf.StatefulLoader<T>.State {
    get
    set
  }
  @discardableResult
  public func onLoading(_ callback: @escaping () -> Swift.Void) -> Self
  @discardableResult
  public func onLoaded(_ callback: @escaping (RANDARulesOfGolf.Result<T>) -> Swift.Void) -> Self
  public func startedLoading()
  public func didLoad(result: RANDARulesOfGolf.Result<T>)
  open func load(priority: Swift.Float = URLSessionTask.defaultPriority)
  open func cancel()
  public func loadOnce()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StateView : UIKit.UIView {
  public enum VerticalAlignment {
    case top
    case center
    public static func == (a: RANDARulesOfGolf.StateView.VerticalAlignment, b: RANDARulesOfGolf.StateView.VerticalAlignment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Config {
    public let isLoading: Swift.Bool
    public let icon: UIKit.UIImage?
    public let title: Swift.String?
    public let subtitle: Swift.String?
    public let primaryButtonConfig: RANDARulesOfGolf.StateView.ButtonConfig?
    public let secondaryButtonConfig: RANDARulesOfGolf.StateView.ButtonConfig?
    public let verticalAlignment: RANDARulesOfGolf.StateView.VerticalAlignment
    public init(isLoading: Swift.Bool = false, icon: UIKit.UIImage? = nil, title: Swift.String? = nil, subtitle: Swift.String? = nil, primaryButtonConfig: RANDARulesOfGolf.StateView.ButtonConfig? = nil, secondaryButtonConfig: RANDARulesOfGolf.StateView.ButtonConfig? = nil, verticalAlignment: RANDARulesOfGolf.StateView.VerticalAlignment = .center)
  }
  public struct ButtonConfig {
    public let title: Swift.String
    public let style: RANDARulesOfGolf.ButtonStyle
    public let action: () -> Swift.Void
    public init(title: Swift.String, style: RANDARulesOfGolf.ButtonStyle = .primary, action: @escaping () -> Swift.Void)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func configure(_ config: RANDARulesOfGolf.StateView.Config)
  @_Concurrency.MainActor(unsafe) public static func configForError(_ viewData: RANDARulesOfGolf.ErrorViewData, verticalAlignment: RANDARulesOfGolf.StateView.VerticalAlignment = .center) -> RANDARulesOfGolf.StateView.Config
  @objc deinit
}
@_inheritsConvenienceInitializers public class AllDefinitionsResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.AllDefinitionsResponse, RANDARulesOfGolf.Definition> {
  override public func processResponse(response: RANDARulesOfGolf.AllDefinitionsResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.Definition]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.Definition>)
  @objc deinit
}
public enum MiddlewareEndpoint : RANDARulesOfGolf.Endpoint {
  case items(workflowStep: RANDARulesOfGolf.WorkflowStep)
  public var path: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class ScrollableStackViewController : RANDARulesOfGolf.ROGViewController {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var rootStackView: UIKit.UIStackView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView!
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PlainTVHeaderFooterView : UIKit.UITableViewHeaderFooterView, RANDARulesOfGolf.NibLoadableView, RANDARulesOfGolf.DataConfigurable {
  public struct ViewModel : RANDARulesOfGolf.CellData {
    public var uid: Any?
    public init(uid: Any? = nil, title: Swift.String)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: RANDARulesOfGolf.PlainTVHeaderFooterView.ViewModel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CoreData.NSManagedObjectContext {
  public func fetchFirst<T>(_ type: T.Type, predicate: Foundation.NSPredicate?) -> T? where T : CoreData.NSManagedObject
  public func fetchAll<T>(_ type: T.Type, predicate: Foundation.NSPredicate? = nil, sortDescriptors: [Foundation.NSSortDescriptor]? = nil, fetchLimit: Swift.Int? = nil, includesSubentities: Swift.Bool = true) -> [T] where T : CoreData.NSManagedObject
  public func fetchAll<T>(fetchRequest: CoreData.NSFetchRequest<T>) -> [T] where T : CoreData.NSManagedObject
  public func countAll<T>(_ type: T.Type, predicate: Foundation.NSPredicate? = nil) -> Swift.Int where T : CoreData.NSManagedObject
  public func createEntity<T>(_ type: T.Type) -> T where T : CoreData.NSManagedObject
  public func fetchFirstOrCreate<T>(_ type: T.Type, predicate: Foundation.NSPredicate?) -> T where T : CoreData.NSManagedObject
  public func deleteOrphans<T>(before: [T]?, after: [T]?) where T : CoreData.NSManagedObject
  public func drop(entities: [CoreData.NSEntityDescription], storeType: Swift.String)
  public func saveChanges()
  public func discardChanges()
}
public enum MediaType {
  case vod
  public static func == (a: RANDARulesOfGolf.MediaType, b: RANDARulesOfGolf.MediaType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MediaItem {
  public init(type: RANDARulesOfGolf.MediaType, identifier: Swift.String, title: Swift.String, url: Foundation.URL, thumbnail: UIKit.UIImage?, playedInfo: (playedTo: Foundation.TimeInterval, duration: Foundation.TimeInterval)?)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class RoundedTableViewController : RANDARulesOfGolf.TableViewController {
  @_Concurrency.MainActor(unsafe) public var roundedCornersEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var separatorStyle: UIKit.UITableViewCell.SeparatorStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @objc deinit
}
public typealias UIButtonTargetClosure = (UIKit.UIButton) -> ()
extension UIKit.UIButton : RANDARulesOfGolf.HasAssociatedValue {
  public typealias T = RANDARulesOfGolf.UIButtonTargetClosure
  @_Concurrency.MainActor(unsafe) public func addTargetClosure(closure: @escaping RANDARulesOfGolf.UIButtonTargetClosure)
}
public enum SearchEvent : RANDARulesOfGolf.AnalyticsEvent {
  case tab(mode: RANDARulesOfGolf.SearchEventMode)
  case commonSituation(mode: RANDARulesOfGolf.SearchEventMode, ruleNumber: Swift.String, codename: Swift.String)
  case results(mode: RANDARulesOfGolf.SearchEventMode)
  case result(mode: RANDARulesOfGolf.SearchEventMode)
  case filter(mode: RANDARulesOfGolf.SearchEventMode)
  case resultsFiltered(mode: RANDARulesOfGolf.SearchEventMode)
  case autocomplete(mode: RANDARulesOfGolf.SearchEventMode)
  case recent(mode: RANDARulesOfGolf.SearchEventMode)
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public enum SearchEventMode : Swift.String {
  case online
  case offline
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SDKSettings {
  var expertMode: Swift.Bool { get set }
}
public struct ROGSDK {
  @_hasMissingDesignatedInitializers public class Settings : RANDARulesOfGolf.SDKSettings {
    public var expertMode: Swift.Bool
    @objc deinit
  }
  public static var settings: RANDARulesOfGolf.SDKSettings
}
extension RANDARulesOfGolf.VideoSection {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.VideoSection>
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inFeed: RANDARulesOfGolf.VideoFeed? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var videos: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.VideoSection {
  @objc(insertObject:inVideosAtIndex:) @NSManaged dynamic public func insertIntoVideos(_ value: RANDARulesOfGolf.Video, at idx: Swift.Int)
  @objc(removeObjectFromVideosAtIndex:) @NSManaged dynamic public func removeFromVideos(at idx: Swift.Int)
  @objc(insertVideos:atIndexes:) @NSManaged dynamic public func insertIntoVideos(_ values: [RANDARulesOfGolf.Video], at indexes: Foundation.NSIndexSet)
  @objc(removeVideosAtIndexes:) @NSManaged dynamic public func removeFromVideos(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInVideosAtIndex:withObject:) @NSManaged dynamic public func replaceVideos(at idx: Swift.Int, with value: RANDARulesOfGolf.Video)
  @objc(replaceVideosAtIndexes:withVideos:) @NSManaged dynamic public func replaceVideos(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.Video])
  @objc(addVideosObject:) @NSManaged dynamic public func addToVideos(_ value: RANDARulesOfGolf.Video)
  @objc(removeVideosObject:) @NSManaged dynamic public func removeFromVideos(_ value: RANDARulesOfGolf.Video)
  @objc(addVideos:) @NSManaged dynamic public func addToVideos(_ values: Foundation.NSOrderedSet)
  @objc(removeVideos:) @NSManaged dynamic public func removeFromVideos(_ values: Foundation.NSOrderedSet)
}
extension RANDARulesOfGolf.VideoSection : Swift.Identifiable {
  public typealias ID = Swift.String?
}
extension RANDARulesOfGolf.Clarification {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Clarification>
  @objc @NSManaged dynamic public var crossLinkText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parent: RANDARulesOfGolf.BaseRuleForm? {
    @objc get
    @objc set
  }
}
public protocol ReusableView : AnyObject {
  static var defaultReuseIdentifier: Swift.String { get }
}
extension RANDARulesOfGolf.ReusableView where Self : UIKit.UIView {
  public static var defaultReuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UICollectionReusableView : RANDARulesOfGolf.ReusableView {
}
extension UIKit.UITableViewCell : RANDARulesOfGolf.ReusableView {
}
extension UIKit.UITableViewHeaderFooterView : RANDARulesOfGolf.ReusableView {
}
public protocol NibLoadableView : AnyObject {
  static var nibName: Swift.String { get }
  static var nib: UIKit.UINib { get }
}
extension RANDARulesOfGolf.NibLoadableView where Self : UIKit.UIView {
  public static var nibName: Swift.String {
    get
  }
  public static var nib: UIKit.UINib {
    get
  }
}
extension RANDARulesOfGolf.NibLoadableView where Self : UIKit.UIView {
  public static func loadFromNib() -> Self
}
extension RANDARulesOfGolf.NibLoadableView where Self : UIKit.UIViewController {
  public static func loadFromNib() -> Self
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UICollectionViewCell, T : RANDARulesOfGolf.NibLoadableView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type, forSupplementaryViewOfKind elementKind: Swift.String) where T : UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type, forSupplementaryViewOfKind elementKind: Swift.String) where T : UIKit.UICollectionReusableView, T : RANDARulesOfGolf.NibLoadableView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableSupplementaryViewOfKind<T>(_ elementKind: Swift.String, forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UICollectionReusableView
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UITableViewCell, T : RANDARulesOfGolf.NibLoadableView
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type) where T : UIKit.UITableViewHeaderFooterView, T : RANDARulesOfGolf.NibLoadableView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableHeaderFooter<T>() -> T where T : UIKit.UITableViewHeaderFooterView
}
extension UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) public func register<T>(_: T.Type, forDecorationViewOfKind elementKind: Swift.String) where T : UIKit.UICollectionReusableView, T : RANDARulesOfGolf.NibLoadableView
}
public protocol ViewFromNib {
  var nibName: Swift.String { get }
  var view: UIKit.UIView! { get set }
}
extension RANDARulesOfGolf.ViewFromNib where Self : UIKit.UIView {
  public var nibName: Swift.String {
    get
  }
  public func xibSetup(isAutoresizing: Swift.Bool = true)
  public func loadViewFromNib() -> UIKit.UIView
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static func loadFromNib<T>(nibName: Swift.String) -> T where T : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public static func loadFromNib<T>() -> T where T : UIKit.UIView
}
extension UIKit.UIEdgeInsets {
  public static func defaultHorizontalMargins(traitCollection: UIKit.UITraitCollection) -> UIKit.UIEdgeInsets
  public init(all: CoreFoundation.CGFloat)
  public init(horizontal: CoreFoundation.CGFloat = 0, vertical: CoreFoundation.CGFloat = 0)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RolexFooterView : UIKit.UIControl, RANDARulesOfGolf.ViewFromNib {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class AllClarificationsResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.AllClarificationsResponse, RANDARulesOfGolf.Clarification> {
  override public func processResponse(response: RANDARulesOfGolf.AllClarificationsResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.Clarification]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.Clarification>)
  @objc deinit
}
public struct CommonSituationsResponse : Swift.Decodable {
  public struct Elements : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class VisualSearchResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.VisualSearchResponse, RANDARulesOfGolf.VisualSearch> {
  override public func processResponse(response: RANDARulesOfGolf.VisualSearchResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.VisualSearch]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.VisualSearch>)
  @objc deinit
}
public struct CoveoAPI : RANDARulesOfGolf.API {
  public let baseURL: Swift.String
  public func request(httpMethod: RANDARulesOfGolf.HTTPMethod, endpoint: RANDARulesOfGolf.CoveoEndpoint, body: Swift.Encodable? = nil) -> RANDARulesOfGolf.Request
}
public struct AdjustsScrollViewContentForKeyboardInfo {
}
public protocol AdjustsScrollViewContentForKeyboard : RANDARulesOfGolf.HasAssociatedValue where Self.T == RANDARulesOfGolf.AdjustsScrollViewContentForKeyboardInfo {
  func registerForKeyboardNotifications(_ scrollView: UIKit.UIScrollView)
  func unregisterFromKeyboardNotifications()
}
extension RANDARulesOfGolf.AdjustsScrollViewContentForKeyboard where Self : UIKit.UIViewController {
  public func registerForKeyboardNotifications(_ scrollView: UIKit.UIScrollView)
  public func unregisterFromKeyboardNotifications()
}
@_inheritsConvenienceInitializers @objc(VideoThumbnail) public class VideoThumbnail : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.DiagramImage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.DiagramImage>
  @objc @NSManaged dynamic public var assetURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inDiagrams: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.DiagramImage {
  @objc(addInDiagramsObject:) @NSManaged dynamic public func addToInDiagrams(_ value: RANDARulesOfGolf.Diagram)
  @objc(removeInDiagramsObject:) @NSManaged dynamic public func removeFromInDiagrams(_ value: RANDARulesOfGolf.Diagram)
  @objc(addInDiagrams:) @NSManaged dynamic public func addToInDiagrams(_ values: Foundation.NSSet)
  @objc(removeInDiagrams:) @NSManaged dynamic public func removeFromInDiagrams(_ values: Foundation.NSSet)
}
extension RANDARulesOfGolf.DiagramImage : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(BaseRandaEntity) public class BaseRandaEntity : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.BaseRuleForm {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.BaseRuleForm>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var desc: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var edition: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floatFullNumber: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var number: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clarifications: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.BaseRuleForm {
  @objc(insertObject:inClarificationsAtIndex:) @NSManaged dynamic public func insertIntoClarifications(_ value: RANDARulesOfGolf.Clarification, at idx: Swift.Int)
  @objc(removeObjectFromClarificationsAtIndex:) @NSManaged dynamic public func removeFromClarifications(at idx: Swift.Int)
  @objc(insertClarifications:atIndexes:) @NSManaged dynamic public func insertIntoClarifications(_ values: [RANDARulesOfGolf.Clarification], at indexes: Foundation.NSIndexSet)
  @objc(removeClarificationsAtIndexes:) @NSManaged dynamic public func removeFromClarifications(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInClarificationsAtIndex:withObject:) @NSManaged dynamic public func replaceClarifications(at idx: Swift.Int, with value: RANDARulesOfGolf.Clarification)
  @objc(replaceClarificationsAtIndexes:withClarifications:) @NSManaged dynamic public func replaceClarifications(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.Clarification])
  @objc(addClarificationsObject:) @NSManaged dynamic public func addToClarifications(_ value: RANDARulesOfGolf.Clarification)
  @objc(removeClarificationsObject:) @NSManaged dynamic public func removeFromClarifications(_ value: RANDARulesOfGolf.Clarification)
  @objc(addClarifications:) @NSManaged dynamic public func addToClarifications(_ values: Foundation.NSOrderedSet)
  @objc(removeClarifications:) @NSManaged dynamic public func removeFromClarifications(_ values: Foundation.NSOrderedSet)
}
public protocol DecoderProtocol {
  associatedtype O
  func decode(data: Foundation.Data?) throws -> Self.O?
}
public struct AnyDecoder<A> : RANDARulesOfGolf.DecoderProtocol {
  public init<D>(_ decoder: D) where A == D.O, D : RANDARulesOfGolf.DecoderProtocol
  public func decode(data: Foundation.Data?) throws -> A?
  public typealias O = A
}
extension RANDARulesOfGolf.VideoThumbnail {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.VideoThumbnail>
  @objc @NSManaged dynamic public var assetURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inVideo: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.VideoThumbnail {
  @objc(addInVideoObject:) @NSManaged dynamic public func addToInVideo(_ value: RANDARulesOfGolf.Video)
  @objc(removeInVideoObject:) @NSManaged dynamic public func removeFromInVideo(_ value: RANDARulesOfGolf.Video)
  @objc(addInVideo:) @NSManaged dynamic public func addToInVideo(_ values: Foundation.NSSet)
  @objc(removeInVideo:) @NSManaged dynamic public func removeFromInVideo(_ values: Foundation.NSSet)
}
extension RANDARulesOfGolf.VideoThumbnail : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(Subrule) public class Subrule : RANDARulesOfGolf.BaseRuleForm {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol CellData {
  var uid: Any? { get set }
}
@_inheritsConvenienceInitializers @objc(BaseRuleForm) public class BaseRuleForm : RANDARulesOfGolf.BaseRandaEntity {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SettingsContentResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.SettingsContentResponse, RANDARulesOfGolf.SettingsContentPage> {
  override public func processResponse(response: RANDARulesOfGolf.SettingsContentResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.SettingsContentPage]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.SettingsContentPage>)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Answer) public class Answer : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol CanPresentAlerts {
  var presenter: UIKit.UIViewController? { get }
  func presentAlert(title: Swift.String?, message: Swift.String?, style: RANDARulesOfGolf.AlertStyle, actions: [RANDARulesOfGolf.AlertAction], animated: Swift.Bool, senderRect: CoreFoundation.CGRect?, completion: (() -> Swift.Void)?)
  func presentAlert(title: Swift.String?, message: Swift.String?, style: RANDARulesOfGolf.AlertStyle, actions: [RANDARulesOfGolf.AlertAction], animated: Swift.Bool, senderRect: CoreFoundation.CGRect?)
  func presentAlert(title: Swift.String?, message: Swift.String?, style: RANDARulesOfGolf.AlertStyle, actions: [RANDARulesOfGolf.AlertAction], animated: Swift.Bool)
  func presentInfoAlert(title: Swift.String, message: Swift.String, dismissTitle: Swift.String)
}
public struct AlertAction {
  public enum Style {
    case normal, destructive, cancel
    public static func == (a: RANDARulesOfGolf.AlertAction.Style, b: RANDARulesOfGolf.AlertAction.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(title: Swift.String, style: RANDARulesOfGolf.AlertAction.Style, isEnabled: Swift.Bool = true, handler: (() -> Swift.Void)?)
}
public enum AlertStyle {
  case alert, actionSheet
  public static func == (a: RANDARulesOfGolf.AlertStyle, b: RANDARulesOfGolf.AlertStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension RANDARulesOfGolf.CanPresentAlerts {
  public func presentAlert(title: Swift.String?, message: Swift.String?, style: RANDARulesOfGolf.AlertStyle, actions: [RANDARulesOfGolf.AlertAction], animated: Swift.Bool, senderRect: CoreFoundation.CGRect?, completion: (() -> Swift.Void)? = nil)
  public func presentAlert(title: Swift.String?, message: Swift.String?, style: RANDARulesOfGolf.AlertStyle, actions: [RANDARulesOfGolf.AlertAction], animated: Swift.Bool, senderRect: CoreFoundation.CGRect?)
  public func presentAlert(title: Swift.String?, message: Swift.String?, style: RANDARulesOfGolf.AlertStyle, actions: [RANDARulesOfGolf.AlertAction], animated: Swift.Bool)
  public func presentInfoAlert(title: Swift.String, message: Swift.String, dismissTitle: Swift.String)
  public func presentActionAlert(title: Swift.String, message: Swift.String, cancelTitle: Swift.String, actionTitle: Swift.String, action: @escaping () -> ())
  public func presentDeleteAlert(title: Swift.String, message: Swift.String, cancelTitle: Swift.String, actionTitle: Swift.String, action: @escaping () -> ())
  public func presentErrorAlert(title: Swift.String, message: Swift.String, shouldRetry: Swift.Bool, cancelTitle: Swift.String, acceptTitle: Swift.String, retryTitle: Swift.String, action: (() -> ())?, retryAction: (() -> ())?)
}
extension RANDARulesOfGolf.CanPresentAlerts where Self : UIKit.UIViewController {
  public var presenter: UIKit.UIViewController? {
    get
  }
}
extension Swift.Error {
  public func isConnectionError() -> Swift.Bool
}
public struct ErrorViewData {
}
public protocol ErrorFormatter {
  func prepareErrorViewData(_ error: Swift.Error, retry: (() -> Swift.Void)?) -> RANDARulesOfGolf.ErrorViewData
}
extension RANDARulesOfGolf.ErrorFormatter {
  public func prepareErrorViewData(_ error: Swift.Error, retry: (() -> Swift.Void)?) -> RANDARulesOfGolf.ErrorViewData
}
public enum LearnEvent : RANDARulesOfGolf.AnalyticsEvent {
  case tab
  case videoList
  case videoListSection(streamId: Swift.String)
  case watchVideo(streamId: Swift.String)
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RolexHeaderView : UIKit.UIView, RANDARulesOfGolf.ViewFromNib {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView!
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SimpleTVCell : UIKit.UITableViewCell, RANDARulesOfGolf.NibLoadableView, RANDARulesOfGolf.DataConfigurable {
  public struct ViewModel : RANDARulesOfGolf.CellData {
    public var uid: Any?
    public init(uid: Any? = nil, title: Swift.String?, accessoryType: UIKit.UITableViewCell.AccessoryType? = nil)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: RANDARulesOfGolf.SimpleTVCell.ViewModel?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum SystemType : Swift.String, Swift.Decodable {
  case definition
  case section
  case subrule
  case rulesInterpretation
  case clarification
  case rule
  case ruleDisabilities
  case committeeProcedure
  case text
  case richText
  case modularContent
  case urlSlug
  case asset
  case multipleChoice
  case rulesQuizComponent
  case rulesDiagram
  case rulesDiagramCarousel
  case videoComponent
  case jpg
  case jpeg
  case png
  case rulesQuizQuestion
  case rulesQuizAnswer
  case organizeRulesQuizItem
  case rulesQuizItem
  case languageHeroBanner
  case rulesQuizResultComponent
  case committeeProcedureSection
  case committeeProcedureSubSection
  case commonSituationsComponent
  case commonSituationsItem
  case visualSearch
  case visualSearchItem
  case visualSearchSubItem
  case informationContentPage
  case randaContentPage
  case richTextAreaComponent
  case simpleHeaderComponent
  case browseLabels
  case commonLabels
  case errorLabels
  case learnLabels
  case newsLabels
  case quizLabels
  case rulesLabels
  case searchLabels
  case settingsLabels
  case videosLabels
  case videosTitles
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class ModalTransitionAnimationController : ObjectiveC.NSObject {
  public enum ModalTransitionType {
    case normal
    case form(padding: UIKit.NSDirectionalEdgeInsets)
    case bottom(height: CoreFoundation.CGFloat, horizontalPadding: CoreFoundation.CGFloat)
  }
  public struct Config {
  }
  public init(config: RANDARulesOfGolf.ModalTransitionAnimationController.Config)
  @objc(transitionDuration:) public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc deinit
}
extension RANDARulesOfGolf.ModalTransitionAnimationController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension RANDARulesOfGolf.ModalTransitionAnimationController : UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
}
extension ObjectiveC.NSObject {
  public static func className() -> Swift.String
}
@_inheritsConvenienceInitializers @objc(CommitteeProcedure) public class CommitteeProcedure : RANDARulesOfGolf.Rule {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct MiddlewareAPI : RANDARulesOfGolf.API {
  public let baseURL: Swift.String
  public func request(httpMethod: RANDARulesOfGolf.HTTPMethod = .get, endpoint: RANDARulesOfGolf.MiddlewareEndpoint, queryParameters: Swift.Encodable? = nil, body: Swift.Encodable? = nil, additionalHeaders: RANDARulesOfGolf.HTTPHeaders = [:]) -> RANDARulesOfGolf.Request
}
@_inheritsConvenienceInitializers @objc(Video) public class Video : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.VisualSearchContentPage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.VisualSearchContentPage>
  @objc @NSManaged dynamic public var number: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relatedRuleCodename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relatedRuleTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inVisualSearchItems: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.VisualSearchContentPage {
  @objc(addInVisualSearchItemsObject:) @NSManaged dynamic public func addToInVisualSearchItems(_ value: RANDARulesOfGolf.VisualSearchItem)
  @objc(removeInVisualSearchItemsObject:) @NSManaged dynamic public func removeFromInVisualSearchItems(_ value: RANDARulesOfGolf.VisualSearchItem)
  @objc(addInVisualSearchItems:) @NSManaged dynamic public func addToInVisualSearchItems(_ values: Foundation.NSSet)
  @objc(removeInVisualSearchItems:) @NSManaged dynamic public func removeFromInVisualSearchItems(_ values: Foundation.NSSet)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ROGBrowserNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension RANDARulesOfGolf.ROGBrowserNavigationController {
  @_Concurrency.MainActor(unsafe) public func didSelect(rule: RANDARulesOfGolf.Rule, clarificationMode: Swift.Bool)
}
extension RANDARulesOfGolf.ROGBrowserNavigationController : RANDARulesOfGolf.RuleBrowserViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func didSelect(baseRuleForm: RANDARulesOfGolf.BaseRuleForm, clarificationMode: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func didSelect(url: Foundation.URL, clarificationMode: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func didTapVideo(_ item: RANDARulesOfGolf.MediaItem)
}
public struct AllDefinitionsResponse : Swift.Decodable {
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
extension RANDARulesOfGolf.Diagram {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.Diagram>
  @objc @NSManaged dynamic public var desc: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inDiagramsCarousel: RANDARulesOfGolf.DiagramsCarousel? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var diagramImage: RANDARulesOfGolf.DiagramImage? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RolexLogoCVCell : UIKit.UICollectionViewCell, RANDARulesOfGolf.NibLoadableView, RANDARulesOfGolf.DataConfigurable {
  public enum Style {
    case header, footer
    public static func == (a: RANDARulesOfGolf.RolexLogoCVCell.Style, b: RANDARulesOfGolf.RolexLogoCVCell.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ViewModel : RANDARulesOfGolf.CellData {
    public var uid: Any?
    public let style: RANDARulesOfGolf.RolexLogoCVCell.Style
    public init(uid: Any? = nil, style: RANDARulesOfGolf.RolexLogoCVCell.Style)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: RANDARulesOfGolf.RolexLogoCVCell.ViewModel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DiagramImage) public class DiagramImage : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
open class DataRequest<R> : RANDARulesOfGolf.StatefulLoader<R> {
  public init(urlSession: Foundation.URLSession, request: RANDARulesOfGolf.Request, decoder: RANDARulesOfGolf.AnyDecoder<R>)
  override open func load(priority: Swift.Float = URLSessionTask.defaultPriority)
  override open func cancel()
  public func loadFromStorageElseNetwork()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(VideoFeed) public class VideoFeed : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct AllRulesResponse : Swift.Decodable {
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
public protocol PopulateLanguageViewControllerDelegate : AnyObject {
  func didPopulateLanguage(_ language: RANDARulesOfGolf.AppLanguage)
  func didCancelPopulatingLanguage(_ language: RANDARulesOfGolf.AppLanguage)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopulateLanguageViewController : RANDARulesOfGolf.ROGViewController, RANDARulesOfGolf.CanPresentAlerts {
  @_Concurrency.MainActor(unsafe) weak public var delegate: RANDARulesOfGolf.PopulateLanguageViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public init(dataManager: RANDARulesOfGolf.DataManager)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Definition) public class Definition : RANDARulesOfGolf.BaseRuleForm {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum CloudMatrixEndpoints : RANDARulesOfGolf.Endpoint {
  case search
  case feed(feedId: Swift.String)
  public var path: Swift.String {
    get
  }
}
extension RANDARulesOfGolf.Definition {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Definition>
}
public struct CloudMatrixAPI : RANDARulesOfGolf.API {
  public let baseURL: Swift.String
  public func request(httpMethod: RANDARulesOfGolf.HTTPMethod = .get, endpoint: RANDARulesOfGolf.CloudMatrixEndpoints, queryParameters: Swift.Encodable? = nil, body: Swift.Encodable? = nil) -> RANDARulesOfGolf.Request
}
@objc @_Concurrency.MainActor(unsafe) open class TableViewController : RANDARulesOfGolf.ROGViewController, RANDARulesOfGolf.DataConfigurable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var stackView: UIKit.UIStackView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var tableView: UIKit.UITableView! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var showsRolexFooter: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(style: UIKit.UITableView.Style = .grouped, nibName: Swift.String? = nil, bundle: Foundation.Bundle? = nil)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public var viewModel: RANDARulesOfGolf.TableViewModel? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: RANDARulesOfGolf.TableViewModel?)
  @_Concurrency.MainActor(unsafe) public func uid(at indexPath: Foundation.IndexPath) -> Any?
  @_Concurrency.MainActor(unsafe) open func didSelectRowWith(uid: Any)
  @_Concurrency.MainActor(unsafe) open func shouldDeselectRowOnSelection(indexPath: Foundation.IndexPath) -> Swift.Bool
  public typealias ViewModel = RANDARulesOfGolf.TableViewModel
  @objc deinit
}
extension RANDARulesOfGolf.TableViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, estimatedHeightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, estimatedHeightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension RANDARulesOfGolf.TableViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, shouldHighlightRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
public protocol HasAssociatedValue : ObjectiveC.NSObject {
  associatedtype T
  var associatedValue: Self.T? { get set }
}
extension RANDARulesOfGolf.HasAssociatedValue {
  public var associatedValue: Self.T? {
    get
    set
  }
}
extension UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) public class func closeButton(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  @_Concurrency.MainActor(unsafe) public static var randaLogo: UIKit.UIBarButtonItem {
    get
  }
}
public enum Result<Value> {
  case success(Value, _: Swift.String?)
  case failure(Swift.Error)
  public var value: Value? {
    get
  }
  public var continuation: Swift.String? {
    get
  }
}
public enum NewsEvent : RANDARulesOfGolf.AnalyticsEvent {
  case tab
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
  public static func == (a: RANDARulesOfGolf.NewsEvent, b: RANDARulesOfGolf.NewsEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension RANDARulesOfGolf.DataManager {
  public func fetchBaseRuleForm(codename: Swift.String) -> RANDARulesOfGolf.BaseRuleForm?
  public func fetchSettingsContent(_ content: RANDARulesOfGolf.SettingsContent) -> RANDARulesOfGolf.SettingsContentPage?
  public func fetchQuizzes() -> [RANDARulesOfGolf.Quiz]
}
public struct ROGTheme {
  public static func color(_ style: RANDARulesOfGolf.ROGTheme.ColorStyle) -> UIKit.UIColor
  public static func font(_ style: RANDARulesOfGolf.ROGTheme.FontStyle, fixedSize: Swift.Bool = false) -> UIKit.UIFont
  public static func cssColorAttributes(_ style: RANDARulesOfGolf.ROGTheme.ColorStyle) -> [Swift.String : Swift.String]
  public static func cssFontAttributes(_ style: RANDARulesOfGolf.ROGTheme.FontStyle, fixedSize: Swift.Bool = false) -> [Swift.String : Swift.String]
  public static func image(_ image: RANDARulesOfGolf.ROGTheme.Image, userInterfaceStyle: UIKit.UIUserInterfaceStyle? = nil) -> UIKit.UIImage?
}
public protocol AnalyticsEvent {
  var name: Swift.String { get }
  var parameters: [Swift.String : Any]? { get }
}
public struct Analytics {
  public static var shared: RANDARulesOfGolf.Analytics
  public func log(_ event: RANDARulesOfGolf.AnalyticsEvent)
}
@_inheritsConvenienceInitializers @objc(VisualSearchContentPage) public class VisualSearchContentPage : RANDARulesOfGolf.BaseRandaEntity {
  override public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SectionTitleHeaderFooterView : UIKit.UITableViewHeaderFooterView, RANDARulesOfGolf.NibLoadableView, RANDARulesOfGolf.DataConfigurable {
  public struct ViewModel : RANDARulesOfGolf.CellData {
    public var uid: Any?
    public init(uid: Any? = nil, title: Swift.String)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: RANDARulesOfGolf.SectionTitleHeaderFooterView.ViewModel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CoveoSearchResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CoveoFacetResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CoveoFacetValueResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CoveoSearchResultResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum SearchRuleCategory : Swift.String, Swift.Equatable, Swift.Codable {
  case rule
  case amateurStatus
  case clarification
  case committteeProcedure
  case unsupported
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SearchDefinitionCategory : Swift.String, Swift.Equatable, Swift.Codable {
  case rule
  case amateurStatus
  case unsupported
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CoveoSearchRawResultResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CoveoQuerySuggestResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CoveoQuerySuggestCompletionResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public protocol VideoPlayer {
  static var shared: Self { get }
  func startVideo(_ mediaItem: RANDARulesOfGolf.MediaItem, presentingViewController: UIKit.UIViewController)
}
@objc @_hasMissingDesignatedInitializers final public class VideoManager : ObjectiveC.NSObject, RANDARulesOfGolf.VideoPlayer, RANDARulesOfGolf.CanPresentAlerts {
  public static var shared: RANDARulesOfGolf.VideoManager
  final public var presenter: UIKit.UIViewController? {
    get
  }
  final public func startVideo(_ mediaItem: RANDARulesOfGolf.MediaItem, presentingViewController: UIKit.UIViewController)
  @objc deinit
}
extension RANDARulesOfGolf.VideoManager : AVKit.AVPlayerViewControllerDelegate {
  @objc final public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc final public func playerViewControllerWillStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc final public func playerViewControllerDidStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc final public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, failedToStartPictureInPictureWithError error: Swift.Error)
  @objc final public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willBeginFullScreenPresentationWithAnimationCoordinator coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc final public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_inheritsConvenienceInitializers @objc(Section) public class Section : RANDARulesOfGolf.BaseRuleForm {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.SettingsContentPage {
  @nonobjc public class func settingsContentFetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.SettingsContentPage>
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
}
public enum RadikalFonts : Swift.String, Swift.CaseIterable {
  case bold
  case boldItalic
  case medium
  case mediumItalic
  case regular
  case regularItalic
  case light
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RANDARulesOfGolf.RadikalFonts]
  public typealias RawValue = Swift.String
  public static var allCases: [RANDARulesOfGolf.RadikalFonts] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension RANDARulesOfGolf.ROGTheme {
  public enum FontStyle : Swift.CaseIterable {
    case bold42
    case bold72
    case bold34
    case medium28
    case bold22
    case medium22
    case bold20
    case medium20
    case bold17
    case light17
    case boldItalic17
    case boldItalic15
    case medium17
    case bold18
    case bold15
    case medium15
    case regular15
    case regular17
    case bold13
    case light13
    case bold12
    case medium10
    case medium12
    case medium13
    case mediumItalic17
    public static func == (a: RANDARulesOfGolf.ROGTheme.FontStyle, b: RANDARulesOfGolf.ROGTheme.FontStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [RANDARulesOfGolf.ROGTheme.FontStyle]
    public static var allCases: [RANDARulesOfGolf.ROGTheme.FontStyle] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NumberedTVCell : UIKit.UITableViewCell, RANDARulesOfGolf.NibLoadableView, RANDARulesOfGolf.DataConfigurable {
  public enum Style {
    case rule, subrule, section, definition, committeeProcedure, subCommitteeProcedure, ruleFinderSubItem
    public static func == (a: RANDARulesOfGolf.NumberedTVCell.Style, b: RANDARulesOfGolf.NumberedTVCell.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SeparatorStyle {
    case none, indented, fullWidth
    public static func == (a: RANDARulesOfGolf.NumberedTVCell.SeparatorStyle, b: RANDARulesOfGolf.NumberedTVCell.SeparatorStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var separatorStyle: RANDARulesOfGolf.NumberedTVCell.SeparatorStyle? {
    get
    set
  }
  public struct ViewModel : RANDARulesOfGolf.CellData {
    public var uid: Any?
    public init(uid: Any? = nil, number: Swift.String?, title: Swift.String?, style: RANDARulesOfGolf.NumberedTVCell.Style, separatorStyle: RANDARulesOfGolf.NumberedTVCell.SeparatorStyle = .indented, disclosureHidden: Swift.Bool = false, isInSplitMain: Swift.Bool = false)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: RANDARulesOfGolf.NumberedTVCell.ViewModel?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension RANDARulesOfGolf.NumberedTVCell : RANDARulesOfGolf.StyleConfigurable {
  @_Concurrency.MainActor(unsafe) public func configure(style: RANDARulesOfGolf.NumberedTVCell.Style)
}
@_inheritsConvenienceInitializers @objc(SettingsContentPage) public class SettingsContentPage : RANDARulesOfGolf.BaseRandaEntity {
  override public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class CommonSituationsMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.CommonSituationsResponse, RANDARulesOfGolf.CommonSituation> {
  override public func processResponse(response: RANDARulesOfGolf.CommonSituationsResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.CommonSituation]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.CommonSituation>)
  @objc deinit
}
extension RANDARulesOfGolf.Section {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Section>
  @objc @NSManaged dynamic public var crossLinkText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parent: RANDARulesOfGolf.Subrule? {
    @objc get
    @objc set
  }
}
extension UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) public var activityIndicator: UIKit.UIActivityIndicatorView? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    set
  }
}
public struct CoveoAnalyticsEventResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension RANDARulesOfGolf.DataManager {
  public func hasContent() -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ROGSearchNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override final public var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @objc deinit
}
extension RANDARulesOfGolf.ROGSearchNavigationController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func rto_showRootViewController(viewController: UIKit.UIViewController, animated: Swift.Bool = true, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func setHeaderFooterHeight()
}
extension RANDARulesOfGolf.VideoAttachment {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.VideoAttachment>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var streamAMGEntryID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var video: RANDARulesOfGolf.Video? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(LabelCollection) public class LabelCollection : RANDARulesOfGolf.BaseRandaEntity {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum CoveoAnalyticsEndpoint : RANDARulesOfGolf.Endpoint {
  case search
  case click
  case custom
  public var path: Swift.String {
    get
  }
  public static func == (a: RANDARulesOfGolf.CoveoAnalyticsEndpoint, b: RANDARulesOfGolf.CoveoAnalyticsEndpoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FullScreenImageViewController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @objc deinit
}
extension RANDARulesOfGolf.FullScreenImageViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func load(url: Foundation.URL, contentMode: UIKit.UIView.ContentMode, animated: Swift.Bool = true, completion: ((Foundation.Data?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func load(remote: RANDARulesOfGolf.RemoteImageModel, contentMode: UIKit.UIView.ContentMode = .scaleAspectFill, animated: Swift.Bool = true, completion: ((UIKit.UIImage?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setPlaceholder(_ placeholder: RANDARulesOfGolf.ImagePlaceholder)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func transition(to image: UIKit.UIImage?, animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
public enum ButtonStyle {
  public enum Varient {
    case varient1, varient2
    public static func == (a: RANDARulesOfGolf.ButtonStyle.Varient, b: RANDARulesOfGolf.ButtonStyle.Varient) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case primary
  case secondary
  case rounded(image: UIKit.UIImage? = nil, imagePlacement: UIKit.NSDirectionalRectEdge = .leading, varient: RANDARulesOfGolf.ButtonStyle.Varient = .varient1, compact: Swift.Bool = false)
  case roundedSecondary
  case text(image: UIKit.UIImage? = nil, imagePlacement: UIKit.NSDirectionalRectEdge = .leading, compact: Swift.Bool = false)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func configure(withTitle title: Swift.String?, andStyle style: RANDARulesOfGolf.ButtonStyle)
}
public enum KenticoEndpoints : RANDARulesOfGolf.Endpoint {
  case items(projectID: Swift.String, workflowStep: RANDARulesOfGolf.WorkflowStep)
  public var path: Swift.String {
    get
  }
}
public protocol MOCProvider {
  var viewContext: CoreData.NSManagedObjectContext { get }
  var newBackgroundContext: CoreData.NSManagedObjectContext { get }
}
@_hasMissingDesignatedInitializers public class DataManager {
  final public let kenticoAPI: RANDARulesOfGolf.KenticoAPI
  final public let cloudMatrixAPI: RANDARulesOfGolf.CloudMatrixAPI
  final public let coveoAPI: RANDARulesOfGolf.CoveoAPI
  final public let coveoAnalyticsAPI: RANDARulesOfGolf.CoveoAnalyticsAPI
  final public let language: RANDARulesOfGolf.AppLanguage
  @objc deinit
}
extension RANDARulesOfGolf.DataManager {
  public static func dataManager(forLanguage language: RANDARulesOfGolf.AppLanguage, shouldSeedIfNecessary: Swift.Bool = true) -> RANDARulesOfGolf.DataManager
  public static var shared: RANDARulesOfGolf.DataManager
}
extension RANDARulesOfGolf.DataManager : RANDARulesOfGolf.MOCProvider {
  public var viewContext: CoreData.NSManagedObjectContext {
    get
  }
  public var newBackgroundContext: CoreData.NSManagedObjectContext {
    get
  }
}
@_inheritsConvenienceInitializers public class QuizResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.AllQuizResponse.Item, RANDARulesOfGolf.Quiz> {
  override public func processResponse(response: RANDARulesOfGolf.AllQuizResponse.Item, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.Quiz]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.Quiz>)
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case delete
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum ContentType {
}
public struct Request {
  public init(baseURL: Swift.String, httpMethod: RANDARulesOfGolf.HTTPMethod, endpoint: RANDARulesOfGolf.Endpoint, queryParameters: Swift.Encodable?, httpHeaders: RANDARulesOfGolf.HTTPHeaders, body: Swift.Encodable?)
}
extension RANDARulesOfGolf.TableViewController {
  public struct TVModel {
    public var sections: [RANDARulesOfGolf.TableViewController.TVSection]
    public init(sections: [RANDARulesOfGolf.TableViewController.TVSection])
  }
  public struct TVSection {
    public var uid: Any?
    public var header: RANDARulesOfGolf.CellData?
    public var cells: [RANDARulesOfGolf.CellData]
    public var footer: RANDARulesOfGolf.CellData?
    public init(uid: Any? = nil, header: RANDARulesOfGolf.CellData? = nil, cells: [RANDARulesOfGolf.CellData], footer: RANDARulesOfGolf.CellData? = nil)
  }
}
extension RANDARulesOfGolf.TableViewController.TVModel : RANDARulesOfGolf.TableViewModel {
  public var numberOfSections: Swift.Int {
    get
  }
  public func numberOfCells(section: Swift.Int) -> Swift.Int
  public func header(section: Swift.Int) -> RANDARulesOfGolf.CellData?
  public func footer(section: Swift.Int) -> RANDARulesOfGolf.CellData?
  public func cellData(indexPath: Foundation.IndexPath) -> RANDARulesOfGolf.CellData
  public func registerCells(tableView: UIKit.UITableView)
}
@_inheritsConvenienceInitializers @objc(LabelItem) public class LabelItem : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Swift.String {
  public func attributedString(baseAttributes: [Foundation.NSAttributedString.Key : Any], substringsAttributes: [(substrings: [Swift.String], attributes: [Foundation.NSAttributedString.Key : Any])] = []) -> Foundation.NSAttributedString
  public func attributedResultString(separator: Swift.String = "/", correctFont: UIKit.UIFont, totalFont: UIKit.UIFont, correctKern: CoreFoundation.CGFloat, totalKern: CoreFoundation.CGFloat) -> Foundation.NSAttributedString
}
public struct BannerButtonViewData {
}
public struct BannerViewData {
}
public protocol BannerDelegate : NotificationBannerSwift.NotificationBannerDelegate {
  func bannerWillAppear()
  func bannerDidAppear()
  func bannerWillDisappear()
  func bannerDidDisappear()
}
extension RANDARulesOfGolf.BannerDelegate {
  public func notificationBannerWillAppear(_ banner: NotificationBannerSwift.BaseNotificationBanner)
  public func notificationBannerDidAppear(_ banner: NotificationBannerSwift.BaseNotificationBanner)
  public func notificationBannerWillDisappear(_ banner: NotificationBannerSwift.BaseNotificationBanner)
  public func notificationBannerDidDisappear(_ banner: NotificationBannerSwift.BaseNotificationBanner)
}
public enum BannerLocation {
  case view
  case window
  public static func == (a: RANDARulesOfGolf.BannerLocation, b: RANDARulesOfGolf.BannerLocation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showBanner(_ viewData: RANDARulesOfGolf.BannerViewData, delegate: RANDARulesOfGolf.BannerDelegate? = nil, location: RANDARulesOfGolf.BannerLocation = .view, duration: Foundation.TimeInterval = 3.0, tapAction: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showErrorBanner(_ viewData: RANDARulesOfGolf.ErrorViewData, delegate: RANDARulesOfGolf.BannerDelegate? = nil, tapAction: (() -> Swift.Void)? = nil)
}
public struct AllClarificationsResponse : Swift.Decodable {
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum AppLanguage : Swift.String, Swift.CaseIterable {
  case english
  case czech
  case dutch
  case finnish
  case danish
  case german
  case hungarian
  case icelandic
  case indonesian
  case japanese
  case korean
  case norwegian
  case portuguese
  case portugueseBrazilian
  case chinese
  case vietnamese
  case swedish
  case french
  case frenchCanadian
  case spanish
  case spanishSouthAmerican
  case estonian
  case italian
  case latvian
  case polish
  case slovakian
  case slovenian
  case turkish
  public static var supported: [RANDARulesOfGolf.AppLanguage] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RANDARulesOfGolf.AppLanguage]
  public typealias RawValue = Swift.String
  public static var allCases: [RANDARulesOfGolf.AppLanguage] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension RANDARulesOfGolf.AppLanguage {
  public var languageIdentifier: Swift.String {
    get
  }
  public var apiLocale: Swift.String {
    get
  }
  public static var current: RANDARulesOfGolf.AppLanguage {
    get
  }
  public var currentName: Swift.String {
    get
  }
  public var englishName: Swift.String {
    get
  }
}
extension RANDARulesOfGolf.AppLanguage {
  public var supportsHandicapCalculator: Swift.Bool {
    get
  }
  public var supportsNews: Swift.Bool {
    get
  }
}
extension RANDARulesOfGolf.LabelItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.LabelItem>
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var language: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inCollection: RANDARulesOfGolf.LabelCollection? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.LabelItem : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public struct SettingsContentResponse : Swift.Decodable {
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct VideoItem : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct VideoListResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct VideoFeedResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ROGLearnNavigationController : UIKit.UINavigationController, RANDARulesOfGolf.CanPresentAlerts {
  @_Concurrency.MainActor(unsafe) final public var childCoordinators: [RANDARulesOfGolf.Coordinator]
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
extension RANDARulesOfGolf.ROGLearnNavigationController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
public protocol RuleBrowserViewControllerDelegate : RANDARulesOfGolf.HasTappableDiagrams {
  func didSelect(url: Foundation.URL, clarificationMode: Swift.Bool)
  func didSelect(baseRuleForm: RANDARulesOfGolf.BaseRuleForm, clarificationMode: Swift.Bool)
  func didTapVideo(_ item: RANDARulesOfGolf.MediaItem)
}
@_inheritsConvenienceInitializers public class AllRulesResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.AllRulesResponse, RANDARulesOfGolf.Rule> {
  override public func processResponse(response: RANDARulesOfGolf.AllRulesResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.Rule]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.Rule>)
  @objc deinit
}
@_inheritsConvenienceInitializers public class AllCommitteeProceduresResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.AllRulesResponse, RANDARulesOfGolf.CommitteeProcedure> {
  override public func processResponse(response: RANDARulesOfGolf.AllRulesResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.CommitteeProcedure]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.CommitteeProcedure>)
  @objc deinit
}
public protocol TextViewControllerDelegate : AnyObject {
  func didSelect(url: Foundation.URL)
  func didTapVideo(_ item: RANDARulesOfGolf.MediaItem)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextViewController : RANDARulesOfGolf.ROGViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: RANDARulesOfGolf.TextViewControllerDelegate?
  public struct ViewModel {
    public init(title: Swift.String?, text: Swift.String?)
  }
  @_Concurrency.MainActor(unsafe) public init(viewModel: RANDARulesOfGolf.TextViewController.ViewModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension RANDARulesOfGolf.TextViewController : RANDARulesOfGolf.HTMLLabelDelegate {
  @_Concurrency.MainActor(unsafe) public func didTapLink(url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func didTapVideo(_ item: RANDARulesOfGolf.MediaItem)
}
public protocol WebViewDelegate : AnyObject {
  func webViewDidStartLoading()
  func webViewDidEndLoading()
  func webViewShouldAllowNavigationActionToURL(_ url: Foundation.URL) -> Swift.Bool
  func webViewShouldAllowNavigationResponseToURL(_ url: Foundation.URL) -> Swift.Bool
  func webViewDidFailNavigation(withError error: Swift.Error)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class WebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: RANDARulesOfGolf.WebViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension RANDARulesOfGolf.WebViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension RANDARulesOfGolf.WebViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension RANDARulesOfGolf.ROGTheme {
  public enum ColorStyle : Swift.String, Swift.CaseIterable {
    case backgroundPrimary
    case backgroundSecondary
    case backgroundTertiary
    case backgroundQuaternary
    case backgroundPrimaryVarient
    case backgroundSecondaryVarient
    case textPrimary
    case textSecondary
    case textSecondaryLight
    case lightColoursSecondary
    case backgroundBigCard
    case backgroundSmallCard
    case separator
    case tintColor
    case backgroundNavigationBar
    case textTertiary
    case textPrimaryLight
    case onTint
    case onSecondaryTint
    case tintVarient
    case tintRed
    case tintGreen
    case disabledBackground
    case textFieldBackground
    case textHighlight
    case textHighlightSelected
    case warning
    case lightBlue
    case tagYellow
    case tagPurple
    case tagTeal
    case tagBlue
    public init?(rawValue: Swift.String)
    public typealias AllCases = [RANDARulesOfGolf.ROGTheme.ColorStyle]
    public typealias RawValue = Swift.String
    public static var allCases: [RANDARulesOfGolf.ROGTheme.ColorStyle] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
@_inheritsConvenienceInitializers @objc(Quiz) public class Quiz : RANDARulesOfGolf.BaseRandaEntity {
  override public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum QuizEvent : RANDARulesOfGolf.AnalyticsEvent {
  case levels
  case started(level: RANDARulesOfGolf.QuizDifficulty)
  case exit(level: RANDARulesOfGolf.QuizDifficulty)
  case completed(level: RANDARulesOfGolf.QuizDifficulty)
  case reviewAnswers(level: RANDARulesOfGolf.QuizDifficulty)
  case anotherButton(level: RANDARulesOfGolf.QuizDifficulty)
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public enum AppEvent : RANDARulesOfGolf.AnalyticsEvent {
  case launched
  case failedToLaunch(reason: Swift.String)
  case next
  case previous
  case websiteLink(url: Swift.String)
  case findInRule(rule: Swift.String)
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@_inheritsConvenienceInitializers @objc(VideoAttachment) public class VideoAttachment : RANDARulesOfGolf.BaseRandaEntity {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PanZoomImageScrollView : UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) public func configureForImageSize(_ imageSize: CoreFoundation.CGSize)
  @objc deinit
}
extension RANDARulesOfGolf.PanZoomImageScrollView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func addCovering(childViewController: UIKit.UIViewController, inView: UIKit.UIView, order: UIKit.UIView.PinnedSubviewOrder = .top, horizontalLayoutGuide: UIKit.UILayoutGuide? = nil, verticalLayoutGuide: UIKit.UILayoutGuide? = nil, insets: UIKit.NSDirectionalEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) public func removeCovering(childViewController: UIKit.UIViewController)
}
@_inheritsConvenienceInitializers public class VideoListResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.VideoListResponse, RANDARulesOfGolf.Video> {
  override public func processResponse(response: RANDARulesOfGolf.VideoListResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.Video]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.Video>)
  @objc deinit
}
extension UIKit.UIInterfaceOrientationMask {
  public static var rogDefault: UIKit.UIInterfaceOrientationMask {
    get
  }
}
extension UIKit.UIInterfaceOrientation {
  public static var rogDefault: UIKit.UIInterfaceOrientation {
    get
  }
}
public enum QuizDifficulty : Swift.String, Swift.CaseIterable {
  case advanced
  case beginner
  case intermediate
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RANDARulesOfGolf.QuizDifficulty]
  public typealias RawValue = Swift.String
  public static var allCases: [RANDARulesOfGolf.QuizDifficulty] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum WorkflowStep : Swift.String, Swift.Encodable {
  case draft
  case published
  case translationReview
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SettingsContent : Swift.String, Swift.Encodable, Swift.CaseIterable {
  case about
  case terms
  case privacy
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RANDARulesOfGolf.SettingsContent]
  public typealias RawValue = Swift.String
  public static var allCases: [RANDARulesOfGolf.SettingsContent] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ImageTVCell : UIKit.UITableViewCell, RANDARulesOfGolf.NibLoadableView, RANDARulesOfGolf.DataConfigurable {
  public struct ViewModel : RANDARulesOfGolf.CellData {
    public var uid: Any?
    public init(uid: Any? = nil, title: Swift.String?, subtitle: Swift.String?, image: UIKit.UIImage?)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func configureStyle()
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: RANDARulesOfGolf.ImageTVCell.ViewModel?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum AdvancedEvent : RANDARulesOfGolf.AnalyticsEvent {
  case enabled
  case skipped
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
  public static func == (a: RANDARulesOfGolf.AdvancedEvent, b: RANDARulesOfGolf.AdvancedEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func resizeWithCompressedWidth()
  @_Concurrency.MainActor(unsafe) public func resizeWithCompressedHeight()
  public enum PinnedSubviewOrder {
    case top
    case above(view: UIKit.UIView)
    case below(view: UIKit.UIView)
  }
  @_Concurrency.MainActor(unsafe) public func addPinnedSubview(_ view: UIKit.UIView, order: UIKit.UIView.PinnedSubviewOrder = .top, horizontalLayoutGuide: UIKit.UILayoutGuide? = nil, verticalLayoutGuide: UIKit.UILayoutGuide? = nil, insets: UIKit.NSDirectionalEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) public func layoutWithoutAnimation()
}
@_inheritsConvenienceInitializers @objc(VisualSearch) public class VisualSearch : RANDARulesOfGolf.BaseRandaEntity {
  override public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.LabelCollection {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.LabelCollection>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastModified: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var labels: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.LabelCollection {
  @objc(addLabelsObject:) @NSManaged dynamic public func addToLabels(_ value: RANDARulesOfGolf.LabelItem)
  @objc(removeLabelsObject:) @NSManaged dynamic public func removeFromLabels(_ value: RANDARulesOfGolf.LabelItem)
  @objc(addLabels:) @NSManaged dynamic public func addToLabels(_ values: Foundation.NSSet)
  @objc(removeLabels:) @NSManaged dynamic public func removeFromLabels(_ values: Foundation.NSSet)
}
extension UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func configureHighlightedBackgroundColor()
  @_Concurrency.MainActor(unsafe) public func configureCornerBackgroundView(insets: UIKit.NSDirectionalEdgeInsets)
}
@_inheritsConvenienceInitializers public class VideoFeedResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.VideoFeedResponse, RANDARulesOfGolf.VideoFeed> {
  override public func processResponse(response: RANDARulesOfGolf.VideoFeedResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.VideoFeed]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.VideoFeed>)
  @objc deinit
}
extension RANDARulesOfGolf.VisualSearch {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.VisualSearch>
  @objc @NSManaged dynamic public var items: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.VisualSearch {
  @objc(insertObject:inItemsAtIndex:) @NSManaged dynamic public func insertIntoItems(_ value: RANDARulesOfGolf.VisualSearchItem, at idx: Swift.Int)
  @objc(removeObjectFromItemsAtIndex:) @NSManaged dynamic public func removeFromItems(at idx: Swift.Int)
  @objc(insertItems:atIndexes:) @NSManaged dynamic public func insertIntoItems(_ values: [RANDARulesOfGolf.VisualSearchItem], at indexes: Foundation.NSIndexSet)
  @objc(removeItemsAtIndexes:) @NSManaged dynamic public func removeFromItems(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInItemsAtIndex:withObject:) @NSManaged dynamic public func replaceItems(at idx: Swift.Int, with value: RANDARulesOfGolf.VisualSearchItem)
  @objc(replaceItemsAtIndexes:withItems:) @NSManaged dynamic public func replaceItems(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.VisualSearchItem])
  @objc(addItemsObject:) @NSManaged dynamic public func addToItems(_ value: RANDARulesOfGolf.VisualSearchItem)
  @objc(removeItemsObject:) @NSManaged dynamic public func removeFromItems(_ value: RANDARulesOfGolf.VisualSearchItem)
  @objc(addItems:) @NSManaged dynamic public func addToItems(_ values: Foundation.NSOrderedSet)
  @objc(removeItems:) @NSManaged dynamic public func removeFromItems(_ values: Foundation.NSOrderedSet)
}
@_inheritsConvenienceInitializers public class LabelsMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.LabelsResponse, RANDARulesOfGolf.LabelCollection> {
  override public func processResponse(response: RANDARulesOfGolf.LabelsResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.LabelCollection]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.LabelCollection>)
  @objc deinit
}
extension RANDARulesOfGolf.CommitteeProcedure {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.CommitteeProcedure>
}
public enum SearchCategory : Swift.Equatable, Swift.CaseIterable {
  case rule
  case definition
  case amateurStatus
  case clarification
  case committteeProcedure
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: RANDARulesOfGolf.SearchCategory, b: RANDARulesOfGolf.SearchCategory) -> Swift.Bool
  public typealias AllCases = [RANDARulesOfGolf.SearchCategory]
  public static var allCases: [RANDARulesOfGolf.SearchCategory] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KenticoAPI : RANDARulesOfGolf.API {
  public let baseURL: Swift.String
  public func request(httpMethod: RANDARulesOfGolf.HTTPMethod = .get, endpoint: RANDARulesOfGolf.KenticoEndpoints, queryParameters: Swift.Encodable? = nil, body: Swift.Encodable? = nil, additionalHeaders: RANDARulesOfGolf.HTTPHeaders = [:]) -> RANDARulesOfGolf.Request
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ROGViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ROGJSONDecoder : Foundation.JSONDecoder {
  open func decodeIfPresent<T>(_ type: T.Type, from data: Foundation.Data) -> T? where T : Swift.Decodable
  @objc deinit
}
public enum FLS : RANDARulesOfGolf.FormattedLocalizableString {
  case hello(name: Swift.String)
  case quizQuestionNumberFormat(number: Swift.Int, total: Swift.Int)
  case quizQuestionBackFormat(number: Swift.Int)
  case quizQuestionIncorrectAnswerFormat(letter: Swift.String)
  case quizChooseLengthAlertButtonFormat(number: Swift.Int)
  case searchNumberOfResultsFormat(keyword: Swift.String, count: Swift.Int)
  case searchNumberOfCategoryResultsFormat(count: Swift.Int)
  case settingsLanguageCurrentTitleFormat(languageName: Swift.String)
  case commonRulesSubtitleFormat(count: Swift.Int)
  case browseDefinitionsSubtitleFormat(count: Swift.Int)
  case browseClarificationsSubtitleFormat(count: Swift.Int)
  case browseCommitteeProceduresSubtitleFormat(count: Swift.Int)
  case ruleFindMatchFormat(number: Swift.Int, total: Swift.Int)
  case ruleViewRuleFormat(title: Swift.String)
  case ruleCommitteeProcedureTitleFormat(number: Swift.String)
  case ruleSectionsTitleFormat(title: Swift.String)
  case ruleClarificationTitleFormat(number: Swift.String)
  case ruleTitleFormat(number: Swift.String)
  case ruleSectionTitleFormat(number: Swift.String)
  case videosNumberOfVideosFormat(count: Swift.Int)
}
extension RANDARulesOfGolf.FLS {
  public var rawValue: Swift.String {
    get
  }
  public var arguments: [Swift.CVarArg] {
    get
  }
}
@_inheritsConvenienceInitializers @objc(Rule) public class Rule : RANDARulesOfGolf.BaseRuleForm {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol HasTappableDiagrams : AnyObject {
  func didTapDiagram(at index: Swift.Int, diagrams: [RANDARulesOfGolf.Diagram])
}
public protocol HTMLLabelDelegate : RANDARulesOfGolf.HasTappableDiagrams {
  func didTapLink(url: Foundation.URL)
  func didTapVideo(_ item: RANDARulesOfGolf.MediaItem)
}
public enum ROGError : Foundation.LocalizedError {
  case decodingFailed
  case urlResolutionFailed
  public static func == (a: RANDARulesOfGolf.ROGError, b: RANDARulesOfGolf.ROGError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension RANDARulesOfGolf.CommonSituation {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.CommonSituation>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var linkToCodename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortOrder: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.BaseRandaEntity {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.BaseRandaEntity>
  @objc @NSManaged dynamic public var guid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var language: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastUpdated: Foundation.Date? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.BaseRandaEntity : Swift.Identifiable {
  public var url: Foundation.URL? {
    get
  }
  public typealias ID = Swift.ObjectIdentifier
}
extension RANDARulesOfGolf.BaseRandaEntity {
  public var appLanguage: RANDARulesOfGolf.AppLanguage {
    get
  }
}
@_inheritsConvenienceInitializers @objc(Clarification) public class Clarification : RANDARulesOfGolf.BaseRuleForm {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DiagramCarouselViewController : RANDARulesOfGolf.ROGViewController, RANDARulesOfGolf.CanPresentAlerts {
  @_Concurrency.MainActor(unsafe) public init(index: Swift.Int, diagrams: [RANDARulesOfGolf.Diagram])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @objc deinit
}
extension RANDARulesOfGolf.DiagramCarouselViewController {
  @_Concurrency.MainActor(unsafe) public func didTapLink(url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func didTapVideo(_ item: RANDARulesOfGolf.MediaItem)
}
extension RANDARulesOfGolf.HasTappableDiagrams where Self : UIKit.UIViewController {
  public func didTapDiagram(at index: Swift.Int, diagrams: [RANDARulesOfGolf.Diagram])
}
extension UIKit.UINavigationController : RANDARulesOfGolf.HasTappableDiagrams {
}
extension UIKit.UITraitCollection {
  public func keyUITraitHasChanged(from previous: UIKit.UITraitCollection?) -> Swift.Bool
}
extension RANDARulesOfGolf.Quiz {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Quiz>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var difficulty: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastModified: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var questions: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.Quiz {
  @objc(addQuestionsObject:) @NSManaged dynamic public func addToQuestions(_ value: RANDARulesOfGolf.Question)
  @objc(removeQuestionsObject:) @NSManaged dynamic public func removeFromQuestions(_ value: RANDARulesOfGolf.Question)
  @objc(addQuestions:) @NSManaged dynamic public func addToQuestions(_ values: Foundation.NSSet)
  @objc(removeQuestions:) @NSManaged dynamic public func removeFromQuestions(_ values: Foundation.NSSet)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TagLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func configureWithTitle(_ title: Swift.String, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static var isIPad: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var isIPhone: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var isLandscape: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var isPortrait: Swift.Bool {
    get
  }
}
public protocol Coordinator {
  var rootController: UIKit.UIViewController { get }
  var childCoordinators: [RANDARulesOfGolf.Coordinator] { get set }
}
extension RANDARulesOfGolf.DataManager {
  public func getAllQuizDataRequest(continuation: Swift.String? = nil) -> RANDARulesOfGolf.FetchedCollectionDataRequest<[RANDARulesOfGolf.Quiz]>
  public func getQuiz(difficulty: RANDARulesOfGolf.QuizDifficulty, continuation: Swift.String? = nil) -> RANDARulesOfGolf.FetchedDataRequest<RANDARulesOfGolf.Quiz>
  public func getVideoFeedDataRequest(feed: RANDARulesOfGolf.CloudMatrixFeed) -> RANDARulesOfGolf.FetchedDataRequest<RANDARulesOfGolf.VideoFeed>
  public func getVideoDataRequest(entryId: Swift.String) -> RANDARulesOfGolf.FetchedDataRequest<RANDARulesOfGolf.Video>
  public func searchRequest(keyword: Swift.String, pageNumber: Swift.Int, selectedCategories: [RANDARulesOfGolf.SearchCategory]) -> RANDARulesOfGolf.DataRequest<RANDARulesOfGolf.CoveoSearchResponse>
  public func autocompleteRequest(keyword: Swift.String) -> RANDARulesOfGolf.DataRequest<RANDARulesOfGolf.CoveoQuerySuggestResponse>
  public func labelsRequest(type: RANDARulesOfGolf.SystemType, continuation: Swift.String? = nil) -> RANDARulesOfGolf.FetchedDataRequest<RANDARulesOfGolf.LabelCollection>
  public func visualSearch(continuation: Swift.String? = nil) -> RANDARulesOfGolf.FetchedDataRequest<RANDARulesOfGolf.VisualSearch>
  public func settingsContent(continuation: Swift.String? = nil) -> RANDARulesOfGolf.FetchedCollectionDataRequest<[RANDARulesOfGolf.SettingsContentPage]>
  public func searchEventRequest(actionCause: RANDARulesOfGolf.AnalyticsActionCause, queryText: Swift.String, searchQueryUid: Swift.String, responseTime: Swift.Int, numberOfResults: Swift.Int, facetState: [RANDARulesOfGolf.SearchEventFacetState]?) -> RANDARulesOfGolf.DataRequest<RANDARulesOfGolf.CoveoAnalyticsEventResponse>
  public func documentOpenEventRequest(actionCause: RANDARulesOfGolf.AnalyticsActionCause, documentPosition: Swift.Int, documentUri: Swift.String, documentUriHash: Swift.String, searchQueryUid: Swift.String) -> RANDARulesOfGolf.DataRequest<RANDARulesOfGolf.CoveoAnalyticsEventResponse>
  public func customEventRequest(customEvent: RANDARulesOfGolf.AnalyticsCustomEvent, lastSearchQueryUid: Swift.String) -> RANDARulesOfGolf.DataRequest<RANDARulesOfGolf.CoveoAnalyticsEventResponse>
}
public struct AllQuizResponse : Swift.Decodable {
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct LabelsResponse : Swift.Decodable {
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers open class FetchedDataRequest<R> : RANDARulesOfGolf.FetchedCollectionDataRequest<[R]> where R : CoreData.NSManagedObject {
  override public init(urlSession: Foundation.URLSession, request: RANDARulesOfGolf.Request, decoder: RANDARulesOfGolf.AnyDecoder<[R]>, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.FetchedCollectionDataRequest<[R]>.E>, viewMoc: CoreData.NSManagedObjectContext)
  @objc deinit
}
open class FetchedCollectionDataRequest<C> : RANDARulesOfGolf.DataRequest<C> where C : Swift.Collection, C.Element : CoreData.NSManagedObject {
  public typealias E = C.Iterator.Element
  public init(urlSession: Foundation.URLSession, request: RANDARulesOfGolf.Request, decoder: RANDARulesOfGolf.AnyDecoder<C>, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.FetchedCollectionDataRequest<C>.E>, viewMoc: CoreData.NSManagedObjectContext)
  override public func loadFromStorageElseNetwork()
  @objc deinit
}
public struct DataTaskOutput {
}
@objc @_inheritsConvenienceInitializers open class NetworkManager : ObjectiveC.NSObject {
  public var urlSession: Foundation.URLSession {
    get
    set
  }
  @discardableResult
  public func perform<T>(request: RANDARulesOfGolf.Request, receiveOn: Dispatch.DispatchQueue = .main, completion: @escaping (RANDARulesOfGolf.Result<T>) -> Swift.Void) -> Foundation.URLSessionDataTask? where T : Swift.Decodable
  @objc override dynamic public init()
  @objc deinit
}
extension RANDARulesOfGolf.NetworkManager : Foundation.URLSessionDataDelegate {
}
open class DecodableToCoreDataMapper<R, C> : RANDARulesOfGolf.DecoderProtocol where R : Swift.Decodable, C : CoreData.NSManagedObject {
  public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<C>)
  public func decode(data: Foundation.Data?) throws -> [C]?
  open func processResponse(response: R, moc: CoreData.NSManagedObjectContext) throws -> [C]?
  open func fetchResults(moc: CoreData.NSManagedObjectContext) throws -> [C]?
  public typealias O = [C]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Question) public class Question : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.Answer {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Answer>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isCorrect: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var language: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastModified: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var question: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.Answer {
  @objc(addQuestionObject:) @NSManaged dynamic public func addToQuestion(_ value: RANDARulesOfGolf.Question)
  @objc(removeQuestionObject:) @NSManaged dynamic public func removeFromQuestion(_ value: RANDARulesOfGolf.Question)
  @objc(addQuestion:) @NSManaged dynamic public func addToQuestion(_ values: Foundation.NSSet)
  @objc(removeQuestion:) @NSManaged dynamic public func removeFromQuestion(_ values: Foundation.NSSet)
}
extension RANDARulesOfGolf.Answer : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension RANDARulesOfGolf.DataManager {
  public func fetchAll<T>(_ type: T.Type, keyPath: Swift.String, searchTerm: Swift.String, sortDescriptors: [Foundation.NSSortDescriptor]? = nil, fetchLimit: Swift.Int? = nil) -> [T] where T : CoreData.NSManagedObject
}
extension RANDARulesOfGolf.Subrule {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Subrule>
  @objc @NSManaged dynamic public var purposeStatement: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parent: RANDARulesOfGolf.Rule? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sections: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.Subrule {
  @objc(insertObject:inSectionsAtIndex:) @NSManaged dynamic public func insertIntoSections(_ value: RANDARulesOfGolf.Section, at idx: Swift.Int)
  @objc(removeObjectFromSectionsAtIndex:) @NSManaged dynamic public func removeFromSections(at idx: Swift.Int)
  @objc(insertSections:atIndexes:) @NSManaged dynamic public func insertIntoSections(_ values: [RANDARulesOfGolf.Section], at indexes: Foundation.NSIndexSet)
  @objc(removeSectionsAtIndexes:) @NSManaged dynamic public func removeFromSections(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInSectionsAtIndex:withObject:) @NSManaged dynamic public func replaceSections(at idx: Swift.Int, with value: RANDARulesOfGolf.Section)
  @objc(replaceSectionsAtIndexes:withSections:) @NSManaged dynamic public func replaceSections(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.Section])
  @objc(addSectionsObject:) @NSManaged dynamic public func addToSections(_ value: RANDARulesOfGolf.Section)
  @objc(removeSectionsObject:) @NSManaged dynamic public func removeFromSections(_ value: RANDARulesOfGolf.Section)
  @objc(addSections:) @NSManaged dynamic public func addToSections(_ values: Foundation.NSOrderedSet)
  @objc(removeSections:) @NSManaged dynamic public func removeFromSections(_ values: Foundation.NSOrderedSet)
}
public enum CoreDataStack {
}
extension RANDARulesOfGolf.CoreDataStack {
  public static var isGeneratingNewSeed: Swift.Bool
}
extension RANDARulesOfGolf.Rule {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Rule>
  @objc @NSManaged dynamic public var lastModified: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nextClarificationCodename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nextRuleCodename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var previousClarificationCodename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var previousRuleCodename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var purposeStatement: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subrules: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.Rule {
  @objc(insertObject:inSubrulesAtIndex:) @NSManaged dynamic public func insertIntoSubrules(_ value: RANDARulesOfGolf.Subrule, at idx: Swift.Int)
  @objc(removeObjectFromSubrulesAtIndex:) @NSManaged dynamic public func removeFromSubrules(at idx: Swift.Int)
  @objc(insertSubrules:atIndexes:) @NSManaged dynamic public func insertIntoSubrules(_ values: [RANDARulesOfGolf.Subrule], at indexes: Foundation.NSIndexSet)
  @objc(removeSubrulesAtIndexes:) @NSManaged dynamic public func removeFromSubrules(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInSubrulesAtIndex:withObject:) @NSManaged dynamic public func replaceSubrules(at idx: Swift.Int, with value: RANDARulesOfGolf.Subrule)
  @objc(replaceSubrulesAtIndexes:withSubrules:) @NSManaged dynamic public func replaceSubrules(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.Subrule])
  @objc(addSubrulesObject:) @NSManaged dynamic public func addToSubrules(_ value: RANDARulesOfGolf.Subrule)
  @objc(removeSubrulesObject:) @NSManaged dynamic public func removeFromSubrules(_ value: RANDARulesOfGolf.Subrule)
  @objc(addSubrules:) @NSManaged dynamic public func addToSubrules(_ values: Foundation.NSOrderedSet)
  @objc(removeSubrules:) @NSManaged dynamic public func removeFromSubrules(_ values: Foundation.NSOrderedSet)
}
extension RANDARulesOfGolf.Video {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.Video>
  @objc @NSManaged dynamic public var contentseries: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entryId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var thumbnailUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var year: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inVideoAttachment: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var videoThumbnail: RANDARulesOfGolf.VideoThumbnail? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inVideoSection: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var areaInCourse: Swift.String? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.Video {
  @objc(addInVideoAttachmentObject:) @NSManaged dynamic public func addToInVideoAttachment(_ value: RANDARulesOfGolf.VideoAttachment)
  @objc(removeInVideoAttachmentObject:) @NSManaged dynamic public func removeFromInVideoAttachment(_ value: RANDARulesOfGolf.VideoAttachment)
  @objc(addInVideoAttachment:) @NSManaged dynamic public func addToInVideoAttachment(_ values: Foundation.NSSet)
  @objc(removeInVideoAttachment:) @NSManaged dynamic public func removeFromInVideoAttachment(_ values: Foundation.NSSet)
}
extension RANDARulesOfGolf.Video : Swift.Identifiable {
  public typealias ID = Swift.String?
}
extension UIKit.UIColor {
  public var cssColor: Swift.String {
    get
  }
  public var hexColor: Swift.String {
    get
  }
}
public protocol WebsiteViewDelegate : RANDARulesOfGolf.WebViewDelegate {
}
@objc @_Concurrency.MainActor(unsafe) open class WebsiteViewController : RANDARulesOfGolf.WebViewController {
  @_Concurrency.MainActor(unsafe) weak open var websiteViewDelegate: RANDARulesOfGolf.WebsiteViewDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension RANDARulesOfGolf.WebsiteViewController : RANDARulesOfGolf.WebViewDelegate {
  @_Concurrency.MainActor(unsafe) public func webViewDidStartLoading()
  @_Concurrency.MainActor(unsafe) public func webViewDidEndLoading()
  @_Concurrency.MainActor(unsafe) public func webViewShouldAllowNavigationActionToURL(_ url: Foundation.URL) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func webViewShouldAllowNavigationResponseToURL(_ url: Foundation.URL) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func webViewDidFailNavigation(withError error: Swift.Error)
}
extension Swift.Int {
  public var stringValue: Swift.String {
    get
  }
}
extension Swift.Int16 {
  public var stringValue: Swift.String {
    get
  }
}
extension Swift.Int32 {
  public var stringValue: Swift.String {
    get
  }
}
extension Swift.Int64 {
  public var stringValue: Swift.String {
    get
  }
}
public enum ImagePlaceholder {
  case smallFilm
  case largeFilm
  case smallPhoto
  case largePhoto
  public static func == (a: RANDARulesOfGolf.ImagePlaceholder, b: RANDARulesOfGolf.ImagePlaceholder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RemoteImageModel : Swift.Equatable {
  public static func == (lhs: RANDARulesOfGolf.RemoteImageModel, rhs: RANDARulesOfGolf.RemoteImageModel) -> Swift.Bool
}
public enum CloudMatrixFeed : Swift.String, Swift.CaseIterable {
  case learn
  case all
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RANDARulesOfGolf.CloudMatrixFeed]
  public typealias RawValue = Swift.String
  public static var allCases: [RANDARulesOfGolf.CloudMatrixFeed] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public func log_debug(_ message: Any)
public func log_info(_ message: Any)
public func log_warning(_ message: Any)
public func log_error(_ message: Any)
public func log_network_request(_ message: Any)
public func log_network_response(_ message: Any)
public func log_analytics_event(_ name: Any, parameters: [Swift.String : Any]?)
public func log_media_event(_ message: Any)
public protocol ROGNavigationControllerDelegate : AnyObject {
  func navigationControllerTraitCollectionDidChange(_ nc: RANDARulesOfGolf.ROGNavigationController, previousTraitCollection: UIKit.UITraitCollection?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ROGNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum CoveoEndpoint : RANDARulesOfGolf.Endpoint {
  case search
  case querySuggest
  public var path: Swift.String {
    get
  }
  public static func == (a: RANDARulesOfGolf.CoveoEndpoint, b: RANDARulesOfGolf.CoveoEndpoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ReachabilityListener : AnyObject {
  func networkStatusDidChange(status: Reachability.Reachability.Connection)
}
@objc @_inheritsConvenienceInitializers public class ReachabilityManager : ObjectiveC.NSObject {
  public static var shared: RANDARulesOfGolf.ReachabilityManager
  public var isNetworkAvailable: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct CoveoAnalyticsAPI : RANDARulesOfGolf.API {
  public let baseURL: Swift.String
  public func request(httpMethod: RANDARulesOfGolf.HTTPMethod, endpoint: RANDARulesOfGolf.CoveoAnalyticsEndpoint, body: Swift.Encodable? = nil) -> RANDARulesOfGolf.Request
}
@_inheritsConvenienceInitializers public class AllQuizzesResponseMapper : RANDARulesOfGolf.DecodableToCoreDataMapper<RANDARulesOfGolf.AllQuizResponse, RANDARulesOfGolf.Quiz> {
  override public func processResponse(response: RANDARulesOfGolf.AllQuizResponse, moc: CoreData.NSManagedObjectContext) throws -> [RANDARulesOfGolf.Quiz]
  override public init(mocProvider: RANDARulesOfGolf.MOCProvider, language: RANDARulesOfGolf.AppLanguage, fetchRequest: CoreData.NSFetchRequest<RANDARulesOfGolf.Quiz>)
  @objc deinit
}
extension RANDARulesOfGolf.Question {
  @nonobjc public class func fetchRequest(language: RANDARulesOfGolf.AppLanguage) -> CoreData.NSFetchRequest<RANDARulesOfGolf.Question>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var explanation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURLPortrait: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURLLandscape: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var language: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastModified: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var answers: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quiz: RANDARulesOfGolf.Quiz? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageDataLandscape: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageDataPortrait: Foundation.Data? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.Question {
  @objc(addAnswersObject:) @NSManaged dynamic public func addToAnswers(_ value: RANDARulesOfGolf.Answer)
  @objc(removeAnswersObject:) @NSManaged dynamic public func removeFromAnswers(_ value: RANDARulesOfGolf.Answer)
  @objc(addAnswers:) @NSManaged dynamic public func addToAnswers(_ values: Foundation.NSSet)
  @objc(removeAnswers:) @NSManaged dynamic public func removeFromAnswers(_ values: Foundation.NSSet)
}
extension RANDARulesOfGolf.Question : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public protocol API {
  var baseURL: Swift.String { get }
}
public protocol Endpoint {
  var path: Swift.String { get }
}
public enum LS : Swift.String, Swift.CaseIterable, RANDARulesOfGolf.LocalizableString {
  case lang
  case check
  case next
  case cancel
  case ok
  case beginner
  case intermediate
  case advanced
  case yes
  case no
  case seeAll
  case commonRulesShortTitle
  case commonDefinitionsTitle
  case commonClarificationsTitle
  case commonViewClarificationButtonTitle
  case commonCommitteeProceduresTitle
  case commonHandicappingRulesTitle
  case commonEquipmentRulesTitle
  case commonAmateurRulesTitle
  case commonNoTranslationAvailable
  case commonNoTranslationsAvailable
  case errorConnectionTitle
  case errorConnectionMessage
  case errorConnectionRetryTitle
  case errorGeneralTitle
  case learnTitle
  case learnQuickGuide
  case learnWatchVideosTitle
  case learnWatchVideosSubtitle
  case learnTakeQuizTitle
  case learnTakeQuizSubtitle
  case learnTakeBeginnerQuizTitle
  case learnTakeIntermediateQuizTitle
  case learnTakeAdvancedQuizTitle
  case learnChooseDifficultyQuizTitle
  case learnHandicapCalculatorTitle
  case learnHandicapCalculatorSubtitle
  case learnHandicapCalculatorButtonTitle
  case learnAdditionalResourcesTitle
  case learnRulesAcademyTitle
  case learnSpiritOfTheGameTitle
  case learnMoreAboutRulesEducationTitle
  case learnOtherRulesResourcesTitle
  case quizNavigationTitle
  case quizBeginnerTitle
  case quizBeginnerDescription
  case quizIntermediateTitle
  case quizIntermediateDescription
  case quizAdvancedTitle
  case quizAdvancedDescription
  case quizQuestionExplanationTitle
  case quizQuestionCorrectAnswer
  case quizChooseLengthAlertTitle
  case quizResultViewAnswersButtonTitle
  case quizYourAnswerTitle
  case quizResultYourResultTitle
  case quizResultTakeAnotherTitle
  case quizReviewAnswersAnswerCorrectTitle
  case quizReviewAnswersAnswerIncorrectTitle
  case quizReviewAnswersCorrectAnswerTitle
  case quizQuitAlertTitle
  case quizQuitAlertMessage
  case advancedModePromptTitle
  case advancedModePromptMessage
  case advancedModePromptYesButton
  case advancedModePromptNoButton
  case searchTitle
  case searchPromptTitle
  case searchPromotMessage
  case searchEmptyTitle
  case searchEmptyMessage
  case searchOfflineBannerTitle
  case searchOfflineBannerMessage
  case searchFilterTitle
  case searchFilterClearButtonTitle
  case searchPlaceholder
  case searchCommonSituationsTitle
  case searchRecentSearchesTitle
  case searchCategoryCommitteeProceduresTitle
  case searchCategoryDisabilitiesTitle
  case searchCategoryArticlesTitle
  case settingsTitle
  case settingsAboutTitle
  case settingsTermsTitle
  case settingsPrivacyPolicyTitle
  case settingsPhoneSettingsButtonTitle
  case settingsNotificationsTitle
  case settingsNotificationsNewsTitle
  case settingsNotificationsNewsSubtitleOff
  case settingsNotificationsNewsSubtitleOn
  case settingsViewingModeTitle
  case settingsViewingModeAdvancedTitle
  case settingsViewingModeAdvancedSubtitle
  case settingsLanguageTitle
  case settingsLanguageCurrentTitleFormat
  case settingsLanguageCurrentSubtitle
  case settingsEmailUsTitle
  case newsTitle
  case editionPlayer
  case editionPaceOfPlay
  case browseTitle
  case browseTitleShort
  case browseRulesTitle
  case browseVisualSearchTitle
  case browseVisualSearchSubtitle
  case browseVisualSearchExampleSituationsTitle
  case browseVisualSearchPlayersSummaryTitle
  case browseVisualSearchRelatedRuleTitle
  case definitionsViewDefinitionButtonTitle
  case definitionsDefinitionTag
  case definitionsClarificationTag
  case definitionsClarificationsTitle
  case definitionsClarificationsInitial
  case videosTitle
  case videosPlaybackFailedTitle
  case videosPlaybackFailedMessage
  case videosEmptyTitle
  case videosEmptyMessage
  case videosFilterByAreaTitle
  case videosFilterByCategoryTitle
  case videosSearchPlaceholder
  case rolexInPartnershipWith
  case rulesSectionFundamentalsTitle
  case rulesSectionRoundAndHoleTitle
  case rulesSectionBallTitle
  case rulesSectionBunkersPuttingGreensTitle
  case rulesSectionLiftingReturningTitle
  case rulesSectionFreeReliefTitle
  case rulesSectionPenaltyReliefTitle
  case rulesSectionProceduresApplyingRulesTitle
  case rulesSectionOtherFormsOfPlayTitle
  case rulesSectionDisabilitiesTitle
  case ruleSectionsTitle
  case ruleFindButtonTitle
  case ruleFindNotFoundTitle
  case ruleViewRule
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RANDARulesOfGolf.LS]
  public typealias RawValue = Swift.String
  public static var allCases: [RANDARulesOfGolf.LS] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.Optional where Wrapped == Swift.String {
  public var nilIfEmpty: Swift.String? {
    get
  }
}
extension RANDARulesOfGolf.VisualSearchItem {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<RANDARulesOfGolf.VisualSearchItem>
  @objc @NSManaged dynamic public var codename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var language: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastModified: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inVisualSearch: RANDARulesOfGolf.VisualSearch? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subItems: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var inVisualSearchItem: RANDARulesOfGolf.VisualSearchItem? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var content: RANDARulesOfGolf.VisualSearchContentPage? {
    @objc get
    @objc set
  }
}
extension RANDARulesOfGolf.VisualSearchItem {
  @objc(insertObject:inSubItemsAtIndex:) @NSManaged dynamic public func insertIntoSubItems(_ value: RANDARulesOfGolf.VisualSearchItem, at idx: Swift.Int)
  @objc(removeObjectFromSubItemsAtIndex:) @NSManaged dynamic public func removeFromSubItems(at idx: Swift.Int)
  @objc(insertSubItems:atIndexes:) @NSManaged dynamic public func insertIntoSubItems(_ values: [RANDARulesOfGolf.VisualSearchItem], at indexes: Foundation.NSIndexSet)
  @objc(removeSubItemsAtIndexes:) @NSManaged dynamic public func removeFromSubItems(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInSubItemsAtIndex:withObject:) @NSManaged dynamic public func replaceSubItems(at idx: Swift.Int, with value: RANDARulesOfGolf.VisualSearchItem)
  @objc(replaceSubItemsAtIndexes:withSubItems:) @NSManaged dynamic public func replaceSubItems(at indexes: Foundation.NSIndexSet, with values: [RANDARulesOfGolf.VisualSearchItem])
  @objc(addSubItemsObject:) @NSManaged dynamic public func addToSubItems(_ value: RANDARulesOfGolf.VisualSearchItem)
  @objc(removeSubItemsObject:) @NSManaged dynamic public func removeFromSubItems(_ value: RANDARulesOfGolf.VisualSearchItem)
  @objc(addSubItems:) @NSManaged dynamic public func addToSubItems(_ values: Foundation.NSOrderedSet)
  @objc(removeSubItems:) @NSManaged dynamic public func removeFromSubItems(_ values: Foundation.NSOrderedSet)
}
extension RANDARulesOfGolf.VisualSearchItem : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public enum AnalyticsActionCause {
  case searchboxSubmit
  case searchFromLink
  case omniboxFromLink(_: RANDARulesOfGolf.QuerySuggestCustomData)
  case facetSelect(_: RANDARulesOfGolf.FacetSelectionCustomData)
  case facetDeselect(_: RANDARulesOfGolf.FacetSelectionCustomData)
  case documentOpen(_: RANDARulesOfGolf.ClickEventCustomData)
}
public enum AnalyticsCustomEvent {
  case getMoreResultsPagerScrolling
  public static func == (a: RANDARulesOfGolf.AnalyticsCustomEvent, b: RANDARulesOfGolf.AnalyticsCustomEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SearchEventFacetState : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct QuerySuggestCustomData : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FacetSelectionCustomData : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ClickEventCustomData : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension UIKit.UINavigationBar : RANDARulesOfGolf.HasAssociatedValue {
  public typealias T = UIKit.UINavigationBar.Style
  public enum Style {
    case style1, style2
    public static func == (a: UIKit.UINavigationBar.Style, b: UIKit.UINavigationBar.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public func configureStyle(_ style: UIKit.UINavigationBar.Style = .style1)
  @_Concurrency.MainActor(unsafe) public func refreshStyle()
}
extension UIKit.NSDirectionalEdgeInsets {
  public static func cell(traitCollection: UIKit.UITraitCollection) -> UIKit.NSDirectionalEdgeInsets
  public static func screen(traitCollection: UIKit.UITraitCollection) -> UIKit.NSDirectionalEdgeInsets
  public func verticalEdgeInsets(horizontalPadding: CoreFoundation.CGFloat = 0) -> UIKit.NSDirectionalEdgeInsets
  public func horizontalEdgeInsets(verticalPadding: CoreFoundation.CGFloat = 0) -> UIKit.NSDirectionalEdgeInsets
  public func horizontalEdgeInsets(top: CoreFoundation.CGFloat = 0, bottom: CoreFoundation.CGFloat = 0) -> UIKit.NSDirectionalEdgeInsets
  public func leadingEdgeInsets() -> UIKit.NSDirectionalEdgeInsets
  public func trailingEdgeInsets() -> UIKit.NSDirectionalEdgeInsets
  public var edgeInsets: UIKit.UIEdgeInsets {
    get
  }
  public init(all: CoreFoundation.CGFloat)
  public init(horizontal: CoreFoundation.CGFloat = 0, vertical: CoreFoundation.CGFloat = 0)
  public func updating(top: CoreFoundation.CGFloat? = nil, leading: CoreFoundation.CGFloat? = nil, bottom: CoreFoundation.CGFloat? = nil, trailing: CoreFoundation.CGFloat? = nil) -> UIKit.NSDirectionalEdgeInsets
}
@_hasMissingDesignatedInitializers final public class KalturaManager : RANDARulesOfGolf.VideoPlayer {
  public static var shared: RANDARulesOfGolf.KalturaManager
  final public func startVideo(_ mediaItem: RANDARulesOfGolf.MediaItem, presentingViewController: UIKit.UIViewController)
  @objc deinit
}
extension RANDARulesOfGolf.ROGTheme {
  public enum Image : Swift.String, Swift.CaseIterable {
    case back
    case forward
    case disclosureIndicator
    case yellowCurve
    case findInRule
    case sections
    case close
    case blueRectangle
    case tab_browse_unselected
    case tab_search_unselected
    case tab_learn_unselected
    case tab_news_unselected
    case tab_settings_unselected
    case tab_browse_selected
    case tab_search_selected
    case tab_learn_selected
    case tab_news_selected
    case tab_settings_selected
    case playersRuleFinder
    case officialRulesOfGolf
    case beginnerQuiz
    case intermediateQuiz
    case advancedQuiz
    case iconANotSelected
    case iconASelected
    case iconBNotSelected
    case iconBSelected
    case iconCNotSelected
    case iconCSelected
    case iconQuizCorrect
    case iconQuizIncorrect
    case iconTintRightArrow
    case play
    case handicapCalculatorImage
    case tealRectangle
    case purpleCurve
    case purpleRectangle
    case expandButton
    case rolexLogo
    case error
    case search
    case advancedModeIcon
    case inPartnershipWithRolex
    case rAndA
    case rolexLogoClock
    case rolex_clock_bg
    case ruleFinderiPhone
    case ruleFinderiPadLandscape
    case ruleFinderiPadPortrait
    public init?(rawValue: Swift.String)
    public typealias AllCases = [RANDARulesOfGolf.ROGTheme.Image]
    public typealias RawValue = Swift.String
    public static var allCases: [RANDARulesOfGolf.ROGTheme.Image] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct VisualSearchResponse : Swift.Decodable {
  public struct Item : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.Array where Element : Swift.Equatable {
  public func removeDuplicates() -> [Element]
}
public typealias Border = (width: CoreFoundation.CGFloat, color: UIKit.UIColor)
extension UIKit.UIImage {
  public class func image(fillColor: UIKit.UIColor, border: RANDARulesOfGolf.Border?, cornerRadius: CoreFoundation.CGFloat = 0, imageSize: CoreFoundation.CGSize? = nil) -> UIKit.UIImage
  public static func coloredImage(size: CoreFoundation.CGSize, color: UIKit.UIColor) -> UIKit.UIImage
  public static func badgeImage(text: Swift.String, font: UIKit.UIFont, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor) -> UIKit.UIImage
  public static func filterBadgeImage(filterCount: Swift.String) -> UIKit.UIImage
  public static func calloutArrowImage(size: CoreFoundation.CGSize, color: UIKit.UIColor) -> UIKit.UIImage
}
public enum MediaEvent : RANDARulesOfGolf.AnalyticsEvent {
  case mediaStarted(_: RANDARulesOfGolf.MediaItem)
  case mediaPaused(_: RANDARulesOfGolf.MediaItem, afterDuration: Foundation.TimeInterval)
  case mediaResumed(_: RANDARulesOfGolf.MediaItem, afterDuration: Foundation.TimeInterval)
  case mediaStopped(_: RANDARulesOfGolf.MediaItem, duration: Foundation.TimeInterval)
  public var name: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func setTextOrHide(_ text: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func set(_ fontStyle: RANDARulesOfGolf.ROGTheme.FontStyle, _ colorStyle: RANDARulesOfGolf.ROGTheme.ColorStyle, _ numberOfLines: Swift.Int = 0)
}
extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) public func set(_ fontStyle: RANDARulesOfGolf.ROGTheme.FontStyle, _ colorStyle: RANDARulesOfGolf.ROGTheme.ColorStyle)
}
@_inheritsConvenienceInitializers @objc(VideoSection) public class VideoSection : CoreData.NSManagedObject, RANDARulesOfGolf.DecodableInstantiable {
  public static func uniquePredicate(for dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage) -> Foundation.NSPredicate?
  public func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Diagram) public class Diagram : RANDARulesOfGolf.BaseRandaEntity {
  override open func update(from dto: Any, metadata: [Swift.String : Any]?, language: RANDARulesOfGolf.AppLanguage, in context: CoreData.NSManagedObjectContext) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension RANDARulesOfGolf.SettingsEvent : Swift.Equatable {}
extension RANDARulesOfGolf.SettingsEvent : Swift.Hashable {}
extension RANDARulesOfGolf.LoadingMode : Swift.Equatable {}
extension RANDARulesOfGolf.LoadingMode : Swift.Hashable {}
extension RANDARulesOfGolf.StateView.VerticalAlignment : Swift.Equatable {}
extension RANDARulesOfGolf.StateView.VerticalAlignment : Swift.Hashable {}
extension RANDARulesOfGolf.SearchCategory : Swift.Hashable {}
extension RANDARulesOfGolf.MediaType : Swift.Equatable {}
extension RANDARulesOfGolf.MediaType : Swift.Hashable {}
extension RANDARulesOfGolf.SearchEventMode : Swift.Equatable {}
extension RANDARulesOfGolf.SearchEventMode : Swift.Hashable {}
extension RANDARulesOfGolf.SearchEventMode : Swift.RawRepresentable {}
extension RANDARulesOfGolf.AlertAction.Style : Swift.Equatable {}
extension RANDARulesOfGolf.AlertAction.Style : Swift.Hashable {}
extension RANDARulesOfGolf.AlertStyle : Swift.Equatable {}
extension RANDARulesOfGolf.AlertStyle : Swift.Hashable {}
extension RANDARulesOfGolf.SystemType : Swift.Equatable {}
extension RANDARulesOfGolf.SystemType : Swift.Hashable {}
extension RANDARulesOfGolf.SystemType : Swift.RawRepresentable {}
extension RANDARulesOfGolf.RolexLogoCVCell.Style : Swift.Equatable {}
extension RANDARulesOfGolf.RolexLogoCVCell.Style : Swift.Hashable {}
extension RANDARulesOfGolf.NewsEvent : Swift.Equatable {}
extension RANDARulesOfGolf.NewsEvent : Swift.Hashable {}
extension RANDARulesOfGolf.SearchRuleCategory : Swift.Hashable {}
extension RANDARulesOfGolf.SearchRuleCategory : Swift.RawRepresentable {}
extension RANDARulesOfGolf.SearchDefinitionCategory : Swift.Hashable {}
extension RANDARulesOfGolf.SearchDefinitionCategory : Swift.RawRepresentable {}
extension RANDARulesOfGolf.RadikalFonts : Swift.Equatable {}
extension RANDARulesOfGolf.RadikalFonts : Swift.Hashable {}
extension RANDARulesOfGolf.RadikalFonts : Swift.RawRepresentable {}
extension RANDARulesOfGolf.ROGTheme.FontStyle : Swift.Equatable {}
extension RANDARulesOfGolf.ROGTheme.FontStyle : Swift.Hashable {}
extension RANDARulesOfGolf.NumberedTVCell.Style : Swift.Equatable {}
extension RANDARulesOfGolf.NumberedTVCell.Style : Swift.Hashable {}
extension RANDARulesOfGolf.NumberedTVCell.SeparatorStyle : Swift.Equatable {}
extension RANDARulesOfGolf.NumberedTVCell.SeparatorStyle : Swift.Hashable {}
extension RANDARulesOfGolf.CoveoAnalyticsEndpoint : Swift.Equatable {}
extension RANDARulesOfGolf.CoveoAnalyticsEndpoint : Swift.Hashable {}
extension RANDARulesOfGolf.ButtonStyle.Varient : Swift.Equatable {}
extension RANDARulesOfGolf.ButtonStyle.Varient : Swift.Hashable {}
extension RANDARulesOfGolf.HTTPMethod : Swift.Equatable {}
extension RANDARulesOfGolf.HTTPMethod : Swift.Hashable {}
extension RANDARulesOfGolf.HTTPMethod : Swift.RawRepresentable {}
extension RANDARulesOfGolf.BannerLocation : Swift.Equatable {}
extension RANDARulesOfGolf.BannerLocation : Swift.Hashable {}
extension RANDARulesOfGolf.AppLanguage : Swift.Equatable {}
extension RANDARulesOfGolf.AppLanguage : Swift.Hashable {}
extension RANDARulesOfGolf.AppLanguage : Swift.RawRepresentable {}
extension RANDARulesOfGolf.ROGTheme.ColorStyle : Swift.Equatable {}
extension RANDARulesOfGolf.ROGTheme.ColorStyle : Swift.Hashable {}
extension RANDARulesOfGolf.ROGTheme.ColorStyle : Swift.RawRepresentable {}
extension RANDARulesOfGolf.QuizDifficulty : Swift.Equatable {}
extension RANDARulesOfGolf.QuizDifficulty : Swift.Hashable {}
extension RANDARulesOfGolf.QuizDifficulty : Swift.RawRepresentable {}
extension RANDARulesOfGolf.WorkflowStep : Swift.Equatable {}
extension RANDARulesOfGolf.WorkflowStep : Swift.Hashable {}
extension RANDARulesOfGolf.WorkflowStep : Swift.RawRepresentable {}
extension RANDARulesOfGolf.SettingsContent : Swift.Equatable {}
extension RANDARulesOfGolf.SettingsContent : Swift.Hashable {}
extension RANDARulesOfGolf.SettingsContent : Swift.RawRepresentable {}
extension RANDARulesOfGolf.AdvancedEvent : Swift.Equatable {}
extension RANDARulesOfGolf.AdvancedEvent : Swift.Hashable {}
extension RANDARulesOfGolf.ROGError : Swift.Equatable {}
extension RANDARulesOfGolf.ROGError : Swift.Hashable {}
extension RANDARulesOfGolf.DiagramCarouselViewController : RANDARulesOfGolf.HTMLLabelDelegate {}
extension RANDARulesOfGolf.ImagePlaceholder : Swift.Equatable {}
extension RANDARulesOfGolf.ImagePlaceholder : Swift.Hashable {}
extension RANDARulesOfGolf.CloudMatrixFeed : Swift.Equatable {}
extension RANDARulesOfGolf.CloudMatrixFeed : Swift.Hashable {}
extension RANDARulesOfGolf.CloudMatrixFeed : Swift.RawRepresentable {}
extension RANDARulesOfGolf.CoveoEndpoint : Swift.Equatable {}
extension RANDARulesOfGolf.CoveoEndpoint : Swift.Hashable {}
extension RANDARulesOfGolf.LS : Swift.Equatable {}
extension RANDARulesOfGolf.LS : Swift.Hashable {}
extension RANDARulesOfGolf.LS : Swift.RawRepresentable {}
extension RANDARulesOfGolf.AnalyticsCustomEvent : Swift.Equatable {}
extension RANDARulesOfGolf.AnalyticsCustomEvent : Swift.Hashable {}
extension UIKit.UINavigationBar.Style : Swift.Equatable {}
extension UIKit.UINavigationBar.Style : Swift.Hashable {}
extension RANDARulesOfGolf.ROGTheme.Image : Swift.Equatable {}
extension RANDARulesOfGolf.ROGTheme.Image : Swift.Hashable {}
extension RANDARulesOfGolf.ROGTheme.Image : Swift.RawRepresentable {}
